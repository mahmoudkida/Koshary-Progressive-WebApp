{"version":3,"sources":["swhelper.js","indexdbhelper.js","dbhelper.js","index.js"],"names":["IndexController","_registerServiceWorker","prototype","navigator","serviceWorker","indexController","register","then","reg","controller","waiting","_updateReady","installing","_trackInstalling","addEventListener","refreshing","window","location","reload","console","log","event","data","msg","url","worker","state","toast","confirm","postMessage","action","swController","IndexDBHelper","Promise","resolve","idb","open","upgradeDb","oldVersion","restaurantStore","createObjectStore","keyPath","createIndex","reviewStore","offlineReview","autoIncrement","offlineRestaurantFavorite","restaurants","callback","openDatabase","db","tx","transaction","store","objectStore","forEach","restaurant","put","complete","idIndex","index","getAll","json","id","find","i","reviews","review","restraintReviewArray","filter","restaurantId","DBHelper","fetch","DATABASE_URL","response","storeRestaurants","catch","ex","error","fetchRestaurants","fetchRestaurantById","is_favorite","method","toggleRestaurantFavorite","postFavoriteOffline","cuisine","results","r","cuisine_type","neighborhood","neighborhoods","map","v","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","storeReviews","fetchReviews","body","addedReview","Object","assign","postReview","postReviewOffline","photograph","marker","google","maps","Marker","position","latlng","title","name","urlForRestaurant","animation","Animation","DROP","port","host","markers","document","getAllRestaurants","fetchNeighborhoods","fetchCuisines","self","fillNeighborhoodsHTML","select","getElementById","option","createElement","innerHTML","value","append","fillCuisinesHTML","initMap","loc","lat","lng","Map","zoom","center","scrollwheel","classList","add","addMarkersToMap","initStaticMap","imageConrtainer","size","offsetWidth","offsetHeight","staticMapURL","querySelector","setAttribute","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","updateRestaurants","cSelect","nSelect","selectedIndex","ul","m","setMap","createRestaurantHTML","setTimeout","bLazy","revalidate","li","image","imageSrc","imageUrlForRestaurant","className","src","alt","picture","dataContainer","href","address","more","addTofavoriteButton","dataset","addRestaurantToFavorite","btn","alert","remove","mapMarkerForRestaurant","addListener","push","changeAriaValue","that","getAttribute","Blazy"],"mappings":"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","file":"index.js","sourcesContent":["function IndexController() {\r\n    this._registerServiceWorker();\r\n}\r\n\r\nIndexController.prototype._registerServiceWorker = function () {\r\n    if (!navigator.serviceWorker) return;\r\n\r\n    var indexController = this;\r\n\r\n    navigator.serviceWorker.register('sw.js').then(function (reg) {\r\n        if (!navigator.serviceWorker.controller) {\r\n            return;\r\n        }\r\n\r\n        if (reg.waiting) {\r\n            indexController._updateReady(reg.waiting);\r\n            return;\r\n        }\r\n\r\n        if (reg.installing) {\r\n            indexController._trackInstalling(reg.installing);\r\n            return;\r\n        }\r\n\r\n        reg.addEventListener('updatefound', function () {\r\n            indexController._trackInstalling(reg.installing);\r\n        });\r\n    });\r\n\r\n    // Ensure refresh is only called once.\r\n    // This works around a bug in \"force update on reload\".\r\n    var refreshing;\r\n    navigator.serviceWorker.addEventListener('controllerchange', function () {\r\n        if (refreshing) return;\r\n        window.location.reload();\r\n        refreshing = true;\r\n    });\r\n    navigator.serviceWorker.addEventListener('message', event => {\r\n        console.log(event.data.msg, event.data.url);\r\n    });\r\n};\r\n\r\nIndexController.prototype._trackInstalling = function (worker) {\r\n    var indexController = this;\r\n    worker.addEventListener('statechange', function () {\r\n        if (worker.state == 'installed') {\r\n            indexController._updateReady(worker);\r\n        }\r\n    });\r\n};\r\n\r\nIndexController.prototype._updateReady = function (worker) {\r\n\r\n    var toast = confirm(\"New version available, do you want to upate ?\");\r\n\r\n    if (toast != null) {\r\n        worker.postMessage({\r\n            action: 'skipWaiting'\r\n        });\r\n    }\r\n\r\n};\r\n\r\n//initialize sw\r\nlet swController = new IndexController();\r\n","/**\r\n * indexdb helper.\r\n */\r\nclass IndexDBHelper {\r\n    static openDatabase() {\r\n        // If the browser doesn't support service worker,\r\n        // we don't care about having a database\r\n        if (!navigator.serviceWorker) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return idb.open('koshary', 4, upgradeDb => {\r\n            switch (upgradeDb.oldVersion) {\r\n                case 0:\r\n                    let restaurantStore = upgradeDb.createObjectStore('restaurants', {\r\n                        keyPath: 'id'\r\n                    });\r\n                    restaurantStore.createIndex('id', 'id');\r\n                case 1:\r\n                    let reviewStore = upgradeDb.createObjectStore('reviews', {\r\n                        keyPath: 'id'\r\n                    });\r\n                    reviewStore.createIndex('id', 'id');\r\n                case 2:\r\n                    let offlineReview = upgradeDb.createObjectStore('offline-reviews',{ keyPath: \"id\", autoIncrement: true });\r\n                case 3:\r\n                    let offlineRestaurantFavorite = upgradeDb.createObjectStore('offline-favorite',{ keyPath: \"id\", autoIncrement: true });\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n\r\n    static storeRestaurants(restaurants, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('restaurants', 'readwrite');\r\n            let store = tx.objectStore('restaurants');\r\n            restaurants.forEach(function (restaurant) {\r\n                store.put(restaurant);\r\n            });\r\n            tx.complete;\r\n        }).then(() => {\r\n            callback(null,restaurants);\r\n        });\r\n    }\r\n\r\n    static fetchRestaurants(callback) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('restaurants', 'readwrite');\r\n            let store = tx.objectStore('restaurants');\r\n            let idIndex = store.index(\"id\");\r\n            return idIndex.getAll();\r\n        }).then((json) => {\r\n            callback(null, json);\r\n        });\r\n    }\r\n    static fetchRestaurantById(id, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('restaurants', 'readwrite');\r\n            let store = tx.objectStore('restaurants');\r\n             let idIndex = store.index(\"id\");\r\n            return idIndex.getAll(); \r\n        }).then((restaurants) => {\r\n            let restaurant = restaurants.find((restaurant, i) => restaurant.id == id);\r\n            restaurant = restaurant[0];\r\n            callback(null,restaurant);\r\n        });\r\n\r\n    }\r\n\r\n    static toggleRestaurantFavorite(restaurant, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('restaurants', 'readwrite');\r\n            let store = tx.objectStore('restaurants');\r\n            store.put(restaurant);\r\n            return tx.complete;\r\n        }).then(()=>{\r\n             callback(null, restaurant);\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    static storeReviews(reviews, callback = () => {}) {\r\n        //cach reviews in indexdb\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('reviews', 'readwrite');\r\n            let store = tx.objectStore('reviews');\r\n            reviews.forEach(function (review) {\r\n                store.put(review);\r\n            });\r\n            return tx.complete;\r\n        }).then(() => {\r\n            callback(null, reviews);\r\n        });\r\n\r\n    }\r\n\r\n    static fetchReviews(id, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('reviews', 'readwrite');\r\n            let store = tx.objectStore('reviews');\r\n            let idIndex = store.index(\"id\");\r\n            return idIndex.getAll;\r\n        }).then((reviews) => {\r\n            let restraintReviewArray = {};\r\n            if (id) {\r\n                restraintReviewArray = reviews.filter((review, i) => review[\"restaurant_id\"] == restaurantId);\r\n            } else {\r\n                restraintReviewArray = reviews;\r\n            }\r\n            callback(null, restraintReviewArray);\r\n        });\r\n    }\r\n    static postReview(review, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('reviews', 'readwrite');\r\n            let store = tx.objectStore('reviews');\r\n            store.put(review);\r\n            return tx.complete;\r\n        }).then(() => {\r\n            callback(null,review);\r\n        });\r\n    }\r\n\r\n    static postReviewOffline(review, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('offline-reviews', 'readwrite');\r\n            let store = tx.objectStore('offline-reviews');\r\n            store.put(review);\r\n            return tx.complete;\r\n        }).then(() => {\r\n            callback(null, review);\r\n        });\r\n    }\r\n    \r\n    static postFavoriteOffline(restaurant, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('offline-favorite', 'readwrite');\r\n            let store = tx.objectStore('offline-favorite');\r\n            store.put(restaurant);\r\n            return tx.complete;\r\n        }).then(() => {\r\n            callback(null, restaurant);\r\n        });\r\n    }\r\n}\r\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        //const port = location.port ? location.port : 8000 // Change this to your server port\r\n        const port = 1337; //change according to gulpfile config\r\n        //const host = location.hostname ? location.hostname : 'localhost';\r\n        const host = 'localhost';\r\n        return `http://${host}:${port}`;\r\n    }\r\n\r\n    /**\r\n     * Fetch all restaurants.\r\n     */\r\n    static fetchRestaurants(callback) {\r\n        fetch(DBHelper.DATABASE_URL + '/restaurants').then((response) => {\r\n            return response.json();\r\n        }).then((restaurants) => {\r\n            //open indexdb to cach all restaurants data\r\n            IndexDBHelper.storeRestaurants(restaurants);\r\n            callback(null, restaurants);\r\n\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            IndexDBHelper.fetchRestaurants(callback);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static fetchRestaurantById(id, callback) {\r\n        fetch(DBHelper.DATABASE_URL + '/restaurants/' + id).then((response) => {\r\n            return response.json();\r\n        }).then((restaurant) => {\r\n\r\n            //add restuarants object array into a variable\r\n            callback(null, restaurant);\r\n\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            IndexDBHelper.fetchRestaurantById(id, callback);\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static toggleRestaurantFavorite(id, callback) {\r\n        DBHelper.fetchRestaurantById(id, function (error, restaurant) {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n\r\n                //send to option the opposite of what is currently set\r\n                restaurant.is_favorite = (restaurant.is_favorite == \"false\" ? \"true\" : \"false\");\r\n                fetch(DBHelper.DATABASE_URL + '/restaurants/' + id + '/?is_favorite=' + restaurant.is_favorite, {\r\n                        method: 'POST'\r\n                    }).then((response) => {\r\n                    return response.json();\r\n                }).then((restaurant) => {\r\n                    IndexDBHelper.toggleRestaurantFavorite(restaurant);\r\n                    callback(null, restaurant);\r\n                }).catch((ex) => {\r\n                    // TODO: add offline favorite to indexdb\r\n                    const error = (`Request failed. Returned status of ${ex}`);\r\n                    //get response from index db if available\r\n                    IndexDBHelper.postFavoriteOffline(restaurant, callback);\r\n                });\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisine(cuisine, callback) {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given cuisine type\r\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given neighborhood\r\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                let results = restaurants\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\r\n    static fetchNeighborhoods(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n                callback(null, uniqueNeighborhoods);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\r\n    static fetchCuisines(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n                callback(null, uniqueCuisines);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * get a review on a restaurant\r\n     */\r\n    static fetchRestaurantReview(restaurantId, callback) {\r\n        fetch(DBHelper.DATABASE_URL + '/reviews').then((response) => {\r\n            return response.json();\r\n        }).then((reviews) => {\r\n            const restraintReviewArray = reviews.filter((review, i) => review[\"restaurant_id\"] == restaurantId)\r\n\r\n            IndexDBHelper.storeReviews(reviews);\r\n\r\n            callback(null, restraintReviewArray);\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            //get response from index db if available\r\n            IndexDBHelper.fetchReviews(restaurantId, callback);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * post a review on a restaurant\r\n     */\r\n\r\n    static postRestaurantReview(review, callback) {\r\n        fetch(DBHelper.DATABASE_URL + '/reviews', {\r\n            method: \"POST\",\r\n            body: review,\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((addedReview) => {\r\n            //cach reviews in indexdb\r\n            review = Object.assign(addedReview,review);\r\n            IndexDBHelper.postReview(review);\r\n            callback(null, review);\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            IndexDBHelper.postReviewOffline(review, callback);\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        return (`/img/${restaurant.photograph}`);\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}\r\n","let restaurants,\r\n    neighborhoods,\r\n    cuisines, map, markers = [];\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n\r\n    getAllRestaurants();\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n    DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n        if (error) { // Got an error\r\n            console.error(error);\r\n        } else {\r\n            self.neighborhoods = neighborhoods;\r\n            fillNeighborhoodsHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n    const select = document.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = neighborhood;\r\n        option.value = neighborhood;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n    DBHelper.fetchCuisines((error, cuisines) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            self.cuisines = cuisines;\r\n            fillCuisinesHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n    const select = document.getElementById('cuisines-select');\r\n\r\n    cuisines.forEach(cuisine => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = cuisine;\r\n        option.value = cuisine;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nfunction initMap() {\r\n    let loc = {\r\n        lat: 40.722216,\r\n        lng: -73.987501\r\n    };\r\n    if (!self.map) {\r\n        self.map = new google.maps.Map(document.getElementById('map'), {\r\n            zoom: 12,\r\n            center: loc,\r\n            scrollwheel: false\r\n        });\r\n    }\r\n\r\n    document.getElementById(\"map-container\").classList.add(\"show-interactive-map\");\r\n    //set markers on the map\r\n    addMarkersToMap();\r\n}\r\n\r\nconst initStaticMap = () => {\r\n    let latlng = \"40.722216,-73.987501\",\r\n        zoom = 12,\r\n        imageConrtainer = document.getElementById(\"map-container\");\r\n    let size = imageConrtainer.offsetWidth + \"x\" + imageConrtainer.offsetHeight;\r\n    let staticMapURL = `https://maps.googleapis.com/maps/api/staticmap?center=${latlng}&zoom=${zoom}&size=${size}&key=AIzaSyD7zwXocDxCO_YLSyVhDNYZDmhMxr0RcNU`;\r\n    restaurants.forEach((restaurant) => {\r\n        staticMapURL += `&markers=${restaurant.latlng.lat},${restaurant.latlng.lng}` ;\r\n    });\r\n    document.querySelector(\".static-map\").setAttribute(\"src\", staticMapURL);\r\n}\r\nconst getAllRestaurants = () => {\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(\"all\", \"all\", (error, restaurants) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            resetRestaurants(restaurants);\r\n            fillRestaurantsHTML();\r\n            initStaticMap();\r\n        }\r\n    })\r\n}\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n    const cSelect = document.getElementById('cuisines-select');\r\n    const nSelect = document.getElementById('neighborhoods-select');\r\n    //get slected option value\r\n    const cuisine = cSelect[cSelect.selectedIndex].value;\r\n    const neighborhood = nSelect[nSelect.selectedIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            resetRestaurants(restaurants);\r\n            fillRestaurantsHTML();\r\n            initMap();\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n    // Remove all restaurants\r\n    self.restaurants = [];\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n\r\n    // Remove all map markers\r\n    self.markers.forEach(m => m.setMap(null));\r\n    self.markers = [];\r\n    self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n    const ul = document.getElementById('restaurants-list');\r\n    restaurants.forEach(restaurant => {\r\n        ul.append(createRestaurantHTML(restaurant));\r\n    });\r\n\r\n    //now we have to fill the static image first\r\n    //addMarkersToMap();\r\n    //init lazy loading\r\n    setTimeout(function () {\r\n        bLazy.revalidate();\r\n    }, 10);\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n    const li = document.createElement('li');\r\n    li.setAttribute(\"role\", \"listitem\")\r\n\r\n    const image = document.createElement('img');\r\n    const imageSrc = DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.className = 'restaurant-img b-lazy';\r\n    image.src = \"/img/placeholder-image.jpg\";\r\n    image.setAttribute(\"data-src\", `${imageSrc}`);\r\n    image.setAttribute(\"data-srcset\", `/img/${restaurant.id}_300.jpg 300w,/img/${restaurant.id}.jpg 586w,/img/${restaurant.id}_800.jpg 800w`);\r\n    image.alt = restaurant.name;\r\n    const picture = document.createElement('picture');\r\n    picture.append(image);\r\n    li.append(picture);\r\n    const dataContainer = document.createElement('article');\r\n    li.append(dataContainer);\r\n    const name = document.createElement('a');\r\n    name.innerHTML = restaurant.name;\r\n    name.href = DBHelper.urlForRestaurant(restaurant);\r\n    dataContainer.append(name);\r\n\r\n    const neighborhood = document.createElement('p');\r\n    neighborhood.setAttribute(\"title\", \"Neighborhood\");\r\n    neighborhood.innerHTML = restaurant.neighborhood;\r\n    dataContainer.append(neighborhood);\r\n\r\n    const address = document.createElement('address');\r\n    address.innerHTML = restaurant.address;\r\n    dataContainer.append(address);\r\n\r\n    const more = document.createElement('a');\r\n    more.innerHTML = 'View Details';\r\n    more.classList.add(\"more\");\r\n    more.setAttribute(\"role\", \"button\");\r\n    more.href = DBHelper.urlForRestaurant(restaurant);\r\n    dataContainer.append(more);\r\n\r\n    const addTofavoriteButton = document.createElement(\"button\");\r\n   \r\n    addTofavoriteButton.classList.add(\"add-tofavorite\");\r\n    if(restaurant.is_favorite == \"true\" || restaurant.is_favorite == true){\r\n        addTofavoriteButton.classList.add(\"favorite\");\r\n        addTofavoriteButton.innerHTML = '<span>★</span> Favorited';\r\n        addTofavoriteButton.title = \"Click to remove from favorite\";\r\n    }\r\n    else{\r\n         addTofavoriteButton.innerHTML = '<span>☆</span> Add To Favorite';\r\n    }\r\n    addTofavoriteButton.setAttribute(\"role\", \"button\");\r\n    addTofavoriteButton.setAttribute(\"onclick\",\"addRestaurantToFavorite(this)\");\r\n    addTofavoriteButton.dataset.restaurantId = restaurant.id;\r\n    dataContainer.append(addTofavoriteButton);\r\n\r\n    return li;\r\n}\r\n\r\n/**\r\n * Add retaurant to favorite.\r\n */\r\nconst addRestaurantToFavorite = (btn) =>{\r\n    DBHelper.toggleRestaurantFavorite(btn.dataset['restaurantId'],function(error,response){\r\n        if(error) alert(error);\r\n        if(response.is_favorite == \"false\"){\r\n            btn.classList.remove(\"favorite\");\r\n            btn.innerHTML = '<span>☆</span> Add To Favorite';\r\n        }else{\r\n            btn.innerHTML = '<span>★</span> Favorited';\r\n            btn.title = \"Click to remove from favorite\";\r\n            btn.classList.add(\"favorite\");\r\n        }\r\n    });\r\n}\r\n\r\n/**                                                                                                                                                                                                                                                                                                                                                                                                             \r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n    restaurants.forEach(restaurant => {\r\n        // Add marker to the map\r\n        const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n        google.maps.event.addListener(marker, 'click', () => {\r\n            window.location.href = marker.url\r\n        });\r\n        self.markers.push(marker);\r\n    });\r\n}\r\n\r\n/*change aria expanded value*/\r\nconst changeAriaValue = (that) => {\r\n    that.getAttribute(\"aria-expanded\") == \"true\" ? that.setAttribute(\"aria-expanded\", \"false\") : that.setAttribute(\"aria-expanded\", \"true\");\r\n}\r\n\r\n\r\n\r\nconst bLazy = new Blazy({\r\n    // Options\r\n});\r\n"]}