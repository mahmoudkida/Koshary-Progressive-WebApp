{"version":3,"sources":["swhelper.js","dbhelper.js","index.js"],"names":["IndexController","_registerServiceWorker","prototype","navigator","serviceWorker","indexController","register","then","reg","controller","waiting","_updateReady","installing","_trackInstalling","addEventListener","refreshing","window","location","reload","worker","state","toast","confirm","postMessage","action","swController","DBHelper","Promise","resolve","idb","open","upgradeDb","store","createObjectStore","keyPath","createIndex","callback","fetch","DATABASE_URL","response","json","restaurants","openDatabase","db","tx","transaction","objectStore","forEach","restaurant","put","catch","ex","error","idIndex","index","getAll","id","get","fetchRestaurantById","is_favorite","method","complete","cuisine","fetchRestaurants","results","filter","r","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","marker","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","port","host","markers","document","event","getAllRestaurants","fetchNeighborhoods","fetchCuisines","console","self","fillNeighborhoodsHTML","select","getElementById","option","createElement","innerHTML","value","append","fillCuisinesHTML","initMap","loc","lat","lng","Map","zoom","center","scrollwheel","classList","add","addMarkersToMap","initStaticMap","imageConrtainer","size","offsetWidth","offsetHeight","staticMapURL","querySelector","setAttribute","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","updateRestaurants","cSelect","nSelect","selectedIndex","ul","m","setMap","createRestaurantHTML","setTimeout","bLazy","revalidate","li","image","imageSrc","imageUrlForRestaurant","className","src","alt","picture","dataContainer","href","address","more","addTofavoriteButton","dataset","restaurantId","addRestaurantToFavorite","btn","toggleRestaurantFavorite","alert","remove","mapMarkerForRestaurant","addListener","push","changeAriaValue","that","getAttribute","Blazy"],"mappings":"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","file":"index.js","sourcesContent":["\r\n\r\nfunction IndexController() {\r\n  this._registerServiceWorker();\r\n}\r\n\r\nIndexController.prototype._registerServiceWorker = function() {\r\n  if (!navigator.serviceWorker) return;\r\n\r\n  var indexController = this;\r\n\r\n  navigator.serviceWorker.register('sw.js').then(function(reg) {\r\n    if (!navigator.serviceWorker.controller) {\r\n      return;\r\n    }\r\n\r\n    if (reg.waiting) {\r\n      indexController._updateReady(reg.waiting);\r\n      return;\r\n    }\r\n\r\n    if (reg.installing) {\r\n      indexController._trackInstalling(reg.installing);\r\n      return;\r\n    }\r\n\r\n    reg.addEventListener('updatefound', function() {\r\n      indexController._trackInstalling(reg.installing);\r\n    });\r\n  });\r\n\r\n  // Ensure refresh is only called once.\r\n  // This works around a bug in \"force update on reload\".\r\n  var refreshing;\r\n  navigator.serviceWorker.addEventListener('controllerchange', function() {\r\n    if (refreshing) return;\r\n    window.location.reload();\r\n    refreshing = true;\r\n  });\r\n};\r\n\r\nIndexController.prototype._trackInstalling = function(worker) {\r\n  var indexController = this;\r\n  worker.addEventListener('statechange', function() {\r\n    if (worker.state == 'installed') {\r\n      indexController._updateReady(worker);\r\n    }\r\n  });\r\n};\r\n\r\nIndexController.prototype._updateReady = function(worker) {\r\n\r\n    var toast = confirm(\"New version available, do you want to upate ?\");\n\r\nif (toast != null) {\r\n    worker.postMessage({action: 'skipWaiting'});\r\n}\r\n\r\n};\r\n\r\n//initialize sw\r\nconst swController = new IndexController();\r\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n\r\n    static openDatabase() {\r\n        // If the browser doesn't support service worker,\r\n        // we don't care about having a database\r\n        if (!navigator.serviceWorker) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return idb.open('koshary', 1, function (upgradeDb) {\r\n            var store = upgradeDb.createObjectStore('restaurants', {\r\n                keyPath: 'id'\r\n            });\r\n            store.createIndex('id', 'id');\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        //const port = location.port ? location.port : 8000 // Change this to your server port\r\n        const port = 1337; //change according to gulpfile config\r\n        //const host = location.hostname ? location.hostname : 'localhost';\r\n        const host = 'localhost';\r\n        return `http://${host}:${port}`;\r\n    }\r\n\r\n    /**\r\n     * Fetch all restaurants.\r\n     */\r\n    static fetchRestaurants(callback) {\r\n        fetch(DBHelper.DATABASE_URL + '/restaurants').then((response) => {\r\n            return response.json();\r\n        }).then((json) => {\r\n\r\n            //add restuarants object array into a variable\r\n            const restaurants = json;\r\n            //open indexdb to cach all restaurants data\r\n            DBHelper.openDatabase().then((db) => {\r\n                if (!db) return;\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n                restaurants.forEach(function (restaurant) {\r\n                    store.put(restaurant);\r\n                });\r\n            });\r\n            callback(null, restaurants);\r\n\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            DBHelper.openDatabase().then((db) => {\r\n                if (!db) return;\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n                let idIndex = store.index(\"id\");\r\n                return idIndex.getAll();\r\n            }).then((json) => {\r\n                const restaurants = json;\r\n                callback(null, restaurants);\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static fetchRestaurantById(id, callback) {\r\n        fetch(DBHelper.DATABASE_URL + '/restaurants/' + id).then((response) => {\r\n            return response.json();\r\n        }).then((json) => {\r\n\r\n            //add restuarants object array into a variable\r\n            const restaurant = json;\r\n            callback(null, restaurant);\r\n\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            DBHelper.openDatabase().then((db) => {\r\n                if (!db) return;\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n                let idIndex = store.index(\"id\");\r\n                return idIndex.get(id);\r\n            }).then((json) => {\r\n                const restaurant = json;\r\n                callback(null, restaurant);\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static toggleRestaurantFavorite(id, callback) {\r\n        DBHelper.fetchRestaurantById(id, function (error, restaurant) {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                //send to option the opposite of what is currently set\r\n                fetch(DBHelper.DATABASE_URL + '/restaurants/' + id + '/?is_favorite=' +\r\n                    (restaurant.is_favorite == \"false\"  ? \"true\" : \"false\"), {\r\n                        method: 'POST'\r\n                    }).then((response) => {\r\n                    return response.json();\r\n                }).then((response) => {\r\n                    DBHelper.openDatabase().then((db) => {\r\n                        if (!db) return;\r\n                        let tx = db.transaction('restaurants', 'readwrite');\r\n                        let store = tx.objectStore('restaurants');\r\n                        store.put(response);\r\n                         return tx.complete;\r\n                    });\r\n                    callback(null, response);\r\n                });\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisine(cuisine, callback) {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given cuisine type\r\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given neighborhood\r\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                let results = restaurants\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\r\n    static fetchNeighborhoods(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n                callback(null, uniqueNeighborhoods);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\r\n    static fetchCuisines(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n                callback(null, uniqueCuisines);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        return (`/img/${restaurant.photograph}`);\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}\r\n","let restaurants,\r\n    neighborhoods,\r\n    cuisines, map, markers = [];\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n\r\n    getAllRestaurants();\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n    DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n        if (error) { // Got an error\r\n            console.error(error);\r\n        } else {\r\n            self.neighborhoods = neighborhoods;\r\n            fillNeighborhoodsHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n    const select = document.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = neighborhood;\r\n        option.value = neighborhood;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n    DBHelper.fetchCuisines((error, cuisines) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            self.cuisines = cuisines;\r\n            fillCuisinesHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n    const select = document.getElementById('cuisines-select');\r\n\r\n    cuisines.forEach(cuisine => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = cuisine;\r\n        option.value = cuisine;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nfunction initMap() {\r\n    let loc = {\r\n        lat: 40.722216,\r\n        lng: -73.987501\r\n    };\r\n    if (!self.map) {\r\n        self.map = new google.maps.Map(document.getElementById('map'), {\r\n            zoom: 12,\r\n            center: loc,\r\n            scrollwheel: false\r\n        });\r\n    }\r\n\r\n    document.getElementById(\"map-container\").classList.add(\"show-interactive-map\");\r\n    //set markers on the map\r\n    addMarkersToMap();\r\n}\r\n\r\nconst initStaticMap = () => {\r\n    let latlng = \"40.722216,-73.987501\",\r\n        zoom = 12,\r\n        imageConrtainer = document.getElementById(\"map-container\");\r\n    let size = imageConrtainer.offsetWidth + \"x\" + imageConrtainer.offsetHeight;\r\n    let staticMapURL = `https://maps.googleapis.com/maps/api/staticmap?center=${latlng}&zoom=${zoom}&size=${size}&key=AIzaSyD7zwXocDxCO_YLSyVhDNYZDmhMxr0RcNU`;\r\n    restaurants.forEach((restaurant) => {\r\n        staticMapURL += `&markers=${restaurant.latlng.lat},${restaurant.latlng.lng}` ;\r\n    });\r\n    document.querySelector(\".static-map\").setAttribute(\"src\", staticMapURL);\r\n}\r\nconst getAllRestaurants = () => {\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(\"all\", \"all\", (error, restaurants) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            resetRestaurants(restaurants);\r\n            fillRestaurantsHTML();\r\n            initStaticMap();\r\n        }\r\n    })\r\n}\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n    const cSelect = document.getElementById('cuisines-select');\r\n    const nSelect = document.getElementById('neighborhoods-select');\r\n    //get slected option value\r\n    const cuisine = cSelect[cSelect.selectedIndex].value;\r\n    const neighborhood = nSelect[nSelect.selectedIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            resetRestaurants(restaurants);\r\n            fillRestaurantsHTML();\r\n            initMap();\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n    // Remove all restaurants\r\n    self.restaurants = [];\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n\r\n    // Remove all map markers\r\n    self.markers.forEach(m => m.setMap(null));\r\n    self.markers = [];\r\n    self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n    const ul = document.getElementById('restaurants-list');\r\n    restaurants.forEach(restaurant => {\r\n        ul.append(createRestaurantHTML(restaurant));\r\n    });\r\n\r\n    //now we have to fill the static image first\r\n    //addMarkersToMap();\r\n    //init lazy loading\r\n    setTimeout(function () {\r\n        bLazy.revalidate();\r\n    }, 10);\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n    const li = document.createElement('li');\r\n    li.setAttribute(\"role\", \"listitem\")\r\n\r\n    const image = document.createElement('img');\r\n    const imageSrc = DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.className = 'restaurant-img b-lazy';\r\n    image.src = \"/img/placeholder-image.png\";\r\n    image.setAttribute(\"data-src\", `${imageSrc}`);\r\n    image.setAttribute(\"data-srcset\", `/img/${restaurant.id}_300.jpg 300w,/img/${restaurant.id}.jpg 586w,/img/${restaurant.id}_800.jpg 800w`);\r\n    image.alt = restaurant.name;\r\n    const picture = document.createElement('picture');\r\n    picture.append(image);\r\n    li.append(picture);\r\n    const dataContainer = document.createElement('article');\r\n    li.append(dataContainer);\r\n    const name = document.createElement('a');\r\n    name.innerHTML = restaurant.name;\r\n    name.href = DBHelper.urlForRestaurant(restaurant);\r\n    dataContainer.append(name);\r\n\r\n    const neighborhood = document.createElement('p');\r\n    neighborhood.setAttribute(\"title\", \"Neighborhood\");\r\n    neighborhood.innerHTML = restaurant.neighborhood;\r\n    dataContainer.append(neighborhood);\r\n\r\n    const address = document.createElement('address');\r\n    address.innerHTML = restaurant.address;\r\n    dataContainer.append(address);\r\n\r\n    const more = document.createElement('a');\r\n    more.innerHTML = 'View Details';\r\n    more.classList.add(\"more\");\r\n    more.setAttribute(\"role\", \"button\");\r\n    more.href = DBHelper.urlForRestaurant(restaurant);\r\n    dataContainer.append(more);\r\n\r\n    const addTofavoriteButton = document.createElement(\"button\");\r\n   \r\n    addTofavoriteButton.classList.add(\"add-tofavorite\");\r\n    if(restaurant.is_favorite == \"true\" || restaurant.is_favorite == true){\r\n        addTofavoriteButton.classList.add(\"favorite\");\r\n        addTofavoriteButton.innerHTML = '<span>★</span> Favorited';\r\n        addTofavoriteButton.title = \"Click to remove from favorite\";\r\n    }\r\n    else{\r\n         addTofavoriteButton.innerHTML = '<span>☆</span> Add To Favorite';\r\n    }\r\n    addTofavoriteButton.setAttribute(\"role\", \"button\");\r\n    addTofavoriteButton.setAttribute(\"onclick\",\"addRestaurantToFavorite(this)\");\r\n    addTofavoriteButton.dataset.restaurantId = restaurant.id;\r\n    dataContainer.append(addTofavoriteButton);\r\n\r\n    return li;\r\n}\r\n\r\n/**\r\n * Add retaurant to favorite.\r\n */\r\nconst addRestaurantToFavorite = (btn) =>{\r\n    DBHelper.toggleRestaurantFavorite(btn.dataset['restaurantId'],function(error,response){\r\n        if(error) alert(error);\r\n        if(response.is_favorite == \"false\"){\r\n            btn.classList.remove(\"favorite\");\r\n            btn.innerHTML = '<span>☆</span> Add To Favorite';\r\n        }else{\r\n            btn.innerHTML = '<span>★</span> Favorited';\r\n            btn.title = \"Click to remove from favorite\";\r\n            btn.classList.add(\"favorite\");\r\n        }\r\n    });\r\n}\r\n\r\n/**                                                                                                                                                                                                                                                                                                                                                                                                             \r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n    restaurants.forEach(restaurant => {\r\n        // Add marker to the map\r\n        const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n        google.maps.event.addListener(marker, 'click', () => {\r\n            window.location.href = marker.url\r\n        });\r\n        self.markers.push(marker);\r\n    });\r\n}\r\n\r\n/*change aria expanded value*/\r\nconst changeAriaValue = (that) => {\r\n    that.getAttribute(\"aria-expanded\") == \"true\" ? that.setAttribute(\"aria-expanded\", \"false\") : that.setAttribute(\"aria-expanded\", \"true\");\r\n}\r\n\r\n\r\n\r\nconst bLazy = new Blazy({\r\n    // Options\r\n});\r\n"]}