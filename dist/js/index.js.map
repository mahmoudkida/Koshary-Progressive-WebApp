{"version":3,"sources":["swhelper.js","dbhelper.js","index.js"],"names":["IndexController","this","_registerServiceWorker","prototype","navigator","serviceWorker","refreshing","indexController","register","then","reg","controller","waiting","_updateReady","installing","_trackInstalling","addEventListener","window","location","reload","worker","state","confirm","postMessage","action","swController","map","DBHelper","idb","open","upgradeDb","createObjectStore","keyPath","createIndex","Promise","resolve","callback","fetch","DATABASE_URL","response","json","restaurants","openDatabase","db","store","transaction","objectStore","forEach","restaurant","put","catch","ex","error","id","fetchRestaurants","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","hostname","markers","document","event","fetchNeighborhoods","console","fillNeighborhoodsHTML","arguments","length","undefined","self","select","getElementById","option","fetchCuisines","fillCuisinesHTML","createElement","innerHTML","value","append","initMap","Map","zoom","center","lat","lng","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","fillRestaurantsHTML","ul","createRestaurantHTML","addMarkersToMap","setTimeout","bLazy","revalidate","li","setAttribute","image","imageSrc","imageUrlForRestaurant","className","src","alt","picture","dataContainer","href","address","more","marker","mapMarkerForRestaurant","addListener","push","that","getAttribute","Blazy"],"mappings":"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","file":"index.js","sourcesContent":["\r\n\r\nfunction IndexController() {\r\n  this._registerServiceWorker();\r\n}\r\n\r\nIndexController.prototype._registerServiceWorker = function() {\r\n  if (!navigator.serviceWorker) return;\r\n\r\n  var indexController = this;\r\n\r\n  navigator.serviceWorker.register('sw.js').then(function(reg) {\r\n    if (!navigator.serviceWorker.controller) {\r\n      return;\r\n    }\r\n\r\n    if (reg.waiting) {\r\n      indexController._updateReady(reg.waiting);\r\n      return;\r\n    }\r\n\r\n    if (reg.installing) {\r\n      indexController._trackInstalling(reg.installing);\r\n      return;\r\n    }\r\n\r\n    reg.addEventListener('updatefound', function() {\r\n      indexController._trackInstalling(reg.installing);\r\n    });\r\n  });\r\n\r\n  // Ensure refresh is only called once.\r\n  // This works around a bug in \"force update on reload\".\r\n  var refreshing;\r\n  navigator.serviceWorker.addEventListener('controllerchange', function() {\r\n    if (refreshing) return;\r\n    window.location.reload();\r\n    refreshing = true;\r\n  });\r\n};\r\n\r\nIndexController.prototype._trackInstalling = function(worker) {\r\n  var indexController = this;\r\n  worker.addEventListener('statechange', function() {\r\n    if (worker.state == 'installed') {\r\n      indexController._updateReady(worker);\r\n    }\r\n  });\r\n};\r\n\r\nIndexController.prototype._updateReady = function(worker) {\r\n\r\n    var toast = confirm(\"New version available, do you want to upate ?\");\r\n\r\nif (toast != null) {\r\n    worker.postMessage({action: 'skipWaiting'});\r\n}\r\n\r\n};\r\n\r\n//initialize sw\r\nconst swController = new IndexController();\r\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n\r\n    static openDatabase() {\r\n        // If the browser doesn't support service worker,\r\n        // we don't care about having a database\r\n        if (!navigator.serviceWorker) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return idb.open('koshary', 1, function (upgradeDb) {\r\n            var store = upgradeDb.createObjectStore('restaurants', {\r\n                keyPath: 'id'\r\n            });\r\n            store.createIndex('id', 'id');\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        //const port = location.port ? location.port : 8000 // Change this to your server port\r\n        const port = 3005; //change according to gulpfile config\r\n        const host = location.hostname ? location.hostname : 'localhost'\r\n        return `http://${host}:${port}/restaurants`;\r\n    }\r\n\r\n    /**\r\n     * Fetch all restaurants.\r\n     */\r\n    static fetchRestaurants(callback) {\r\n        fetch(DBHelper.DATABASE_URL).then((response) => {\r\n            return response.json();\r\n        }).then((json) => {\r\n\r\n            //add restuarants object array into a variable\r\n            const restaurants = json;\r\n            //open indexdb to cach all restaurants data\r\n            DBHelper.openDatabase().then(function (db) {\r\n                if (!db) return;\r\n                var tx = db.transaction('restaurants', 'readwrite');\r\n                var store = tx.objectStore('restaurants');\r\n                restaurants.forEach(function (restaurant) {\r\n                    store.put(restaurant);\r\n                });\r\n            });\r\n            callback(null, restaurants);\r\n\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            callback(error, null);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static fetchRestaurantById(id, callback) {\r\n        // fetch all restaurants with proper error handling.\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                const restaurant = restaurants.find(r => r.id == id);\r\n                if (restaurant) { // Got the restaurant\r\n                    callback(null, restaurant);\r\n                } else { // Restaurant does not exist in the database\r\n                    callback('Restaurant does not exist', null);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisine(cuisine, callback) {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given cuisine type\r\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given neighborhood\r\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                let results = restaurants\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\r\n    static fetchNeighborhoods(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n                callback(null, uniqueNeighborhoods);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\r\n    static fetchCuisines(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n                callback(null, uniqueCuisines);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        return (`/img/${restaurant.photograph}`);\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}\r\n","let restaurants,\r\n    neighborhoods,\r\n    cuisines\r\nvar map\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n    DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n        if (error) { // Got an error\r\n            console.error(error);\r\n        } else {\r\n            self.neighborhoods = neighborhoods;\r\n            fillNeighborhoodsHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n    const select = document.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = neighborhood;\r\n        option.value = neighborhood;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n    DBHelper.fetchCuisines((error, cuisines) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            self.cuisines = cuisines;\r\n            fillCuisinesHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n    const select = document.getElementById('cuisines-select');\r\n\r\n    cuisines.forEach(cuisine => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = cuisine;\r\n        option.value = cuisine;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nfunction initMap(){\r\n    let loc = {\r\n        lat: 40.722216,\r\n        lng: -73.987501\r\n    };\r\n    self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 12,\r\n        center: loc,\r\n        scrollwheel: false\r\n    });\r\n    //set title for the map iframe for increased accessability\r\n//    setTimeout(function(){\r\n//            document.getElementById('map').getElementsByTagName(\"iframe\")[0].setAttribute(\"title\",\"Google Maps - An interactive map showing multiple restuarants' locations according to the filtered neighborhood and cuisine\");\r\n//    },10);\r\n    updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n    const cSelect = document.getElementById('cuisines-select');\r\n    const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n    const cIndex = cSelect.selectedIndex;\r\n    const nIndex = nSelect.selectedIndex;\r\n\r\n    const cuisine = cSelect[cIndex].value;\r\n    const neighborhood = nSelect[nIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            resetRestaurants(restaurants);\r\n            fillRestaurantsHTML();\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n    // Remove all restaurants\r\n    self.restaurants = [];\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n\r\n    // Remove all map markers\r\n    self.markers.forEach(m => m.setMap(null));\r\n    self.markers = [];\r\n    self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n    const ul = document.getElementById('restaurants-list');\r\n    restaurants.forEach(restaurant => {\r\n        ul.append(createRestaurantHTML(restaurant));\r\n    });\r\n\r\n    addMarkersToMap();\r\n    //init lazy loading\r\n    setTimeout(function () {\r\n        bLazy.revalidate();\r\n    },10);\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n    const li = document.createElement('li');\r\n    li.setAttribute(\"role\",\"listitem\")\r\n\r\n    const image = document.createElement('img');\r\n    const imageSrc= DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.className = 'restaurant-img b-lazy';\r\n    image.src=\"/img/placeholder-image.png\";\r\n    image.setAttribute(\"data-src\",`${imageSrc}`);\r\n    image.setAttribute(\"data-srcset\", `/img/${restaurant.id}_300.jpg 300w,/img/${restaurant.id}.jpg 586w,/img/${restaurant.id}_800.jpg 800w`);\r\n\r\n//    image.setAttribute(\"data-src-small\",`img/${restaurant.id}_300.jpg`);\r\n//    image.setAttribute(\"data-src-medium\",`img/${restaurant.id}_580.jpg`);\r\n//    image.setAttribute(\"data-src-large\",`img/${restaurant.id}_800.jpg`);\r\n    image.alt = restaurant.name;\r\n    const picture = document.createElement('picture');\r\n    picture.append(image);\r\n    li.append(picture);\r\n    const dataContainer = document.createElement('article');\r\n    li.append(dataContainer);\r\n    const name = document.createElement('a');\r\n    name.innerHTML = restaurant.name;\r\n    name.href = DBHelper.urlForRestaurant(restaurant);\r\n    dataContainer.append(name);\r\n\r\n    const neighborhood = document.createElement('p');\r\n    neighborhood.setAttribute(\"title\",\"Neighborhood\");\r\n    neighborhood.innerHTML = restaurant.neighborhood;\r\n    dataContainer.append(neighborhood);\r\n\r\n    const address = document.createElement('address');\r\n    address.innerHTML = restaurant.address;\r\n    dataContainer.append(address);\r\n\r\n    const more = document.createElement('a');\r\n    more.innerHTML = 'View Details';\r\n    more.classList.add(\"more\");\r\n    more.setAttribute(\"role\",\"button\");\r\n    more.href = DBHelper.urlForRestaurant(restaurant);\r\n    dataContainer.append(more)\r\n\r\n    return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n    restaurants.forEach(restaurant => {\r\n        // Add marker to the map\r\n        const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n        google.maps.event.addListener(marker, 'click', () => {\r\n            window.location.href = marker.url\r\n        });\r\n        self.markers.push(marker);\r\n    });\r\n}\r\n\r\n/*change aria expanded value*/\r\nconst changeAriaValue = (that) =>{\r\n    that.getAttribute(\"aria-expanded\") == \"true\" ? that.setAttribute(\"aria-expanded\",\"false\"):that.setAttribute(\"aria-expanded\",\"true\");\r\n}\r\n\r\n\r\n\r\n    const bLazy = new Blazy({\r\n        // Options\r\n    });\r\n"]}