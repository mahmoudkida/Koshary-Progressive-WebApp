{"version":3,"sources":["idb.js","swhelper.js","dbhelper.js","index.js","restaurant_info.js"],"names":["IndexController","this","_registerServiceWorker","promisifyRequest","request","Promise","resolve","reject","onsuccess","result","onerror","error","promisifyRequestCall","obj","method","args","p","apply","then","proxyProperties","ProxyClass","targetProp","properties","forEach","prop","Object","defineProperty","prototype","get","set","val","proxyRequestMethods","Constructor","arguments","proxyMethods","proxyCursorRequestMethods","value","Cursor","Index","index","_index","cursor","_cursor","_request","ObjectStore","store","_store","Transaction","idbTransaction","_tx","complete","oncomplete","onabort","UpgradeDB","db","oldVersion","transaction","_db","DB","IDBIndex","IDBCursor","methodName","createIndex","IDBObjectStore","objectStore","IDBTransaction","createObjectStore","IDBDatabase","funcName","replace","arr","Array","slice","call","callback","length","nativeObject","getAll","query","count","instance","items","iterateCursor","push","undefined","continue","exp","open","name","version","upgradeCallback","indexedDB","onupgradeneeded","event","delete","module","exports","default","self","idb","navigator","serviceWorker","refreshing","indexController","register","reg","controller","waiting","_updateReady","installing","_trackInstalling","addEventListener","window","location","reload","worker","state","prompt","postMessage","action","swController","DBHelper","upgradeDb","keyPath","fetch","DATABASE_URL","response","json","restaurants","openDatabase","restaurant","put","catch","ex","id","fetchRestaurants","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","google","maps","Marker","position","latlng","title","url","urlForRestaurant","animation","Animation","DROP","hostname","markers","document","fetchNeighborhoods","fetchCuisines","fillNeighborhoodsHTML","select","getElementById","option","createElement","innerHTML","append","fillCuisinesHTML","initMap","Map","zoom","center","lat","lng","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","console","resetRestaurants","fillRestaurantsHTML","m","setMap","ul","createRestaurantHTML","addMarkersToMap","li","setAttribute","image","className","src","imageUrlForRestaurant","srcset","alt","picture","dataContainer","href","address","more","classList","add","marker","mapMarkerForRestaurant","addListener","changeAriaValue","that","getAttribute","initInnerMap","fetchRestaurantFromURL","fillBreadcrumb","getParameterByName","fetchRestaurantById","fillRestaurantHTML","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","day","appendChild","time","reviews","container","noReviews","review","createReviewHTML","date","rating","comments","breadcrumb","RegExp","exec","decodeURIComponent"],"mappings":"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","file":"main.js","sourcesContent":["'use strict';\n\n(function() {\n  function toArray(arr) {\n    return Array.prototype.slice.call(arr);\n  }\n\n  function promisifyRequest(request) {\n    return new Promise(function(resolve, reject) {\n      request.onsuccess = function() {\n        resolve(request.result);\n      };\n\n      request.onerror = function() {\n        reject(request.error);\n      };\n    });\n  }\n\n  function promisifyRequestCall(obj, method, args) {\n    var request;\n    var p = new Promise(function(resolve, reject) {\n      request = obj[method].apply(obj, args);\n      promisifyRequest(request).then(resolve, reject);\n    });\n\n    p.request = request;\n    return p;\n  }\n\n  function promisifyCursorRequestCall(obj, method, args) {\n    var p = promisifyRequestCall(obj, method, args);\n    return p.then(function(value) {\n      if (!value) return;\n      return new Cursor(value, p.request);\n    });\n  }\n\n  function proxyProperties(ProxyClass, targetProp, properties) {\n    properties.forEach(function(prop) {\n      Object.defineProperty(ProxyClass.prototype, prop, {\n        get: function() {\n          return this[targetProp][prop];\n        },\n        set: function(val) {\n          this[targetProp][prop] = val;\n        }\n      });\n    });\n  }\n\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return this[targetProp][prop].apply(this[targetProp], arguments);\n      };\n    });\n  }\n\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\n    properties.forEach(function(prop) {\n      if (!(prop in Constructor.prototype)) return;\n      ProxyClass.prototype[prop] = function() {\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\n      };\n    });\n  }\n\n  function Index(index) {\n    this._index = index;\n  }\n\n  proxyProperties(Index, '_index', [\n    'name',\n    'keyPath',\n    'multiEntry',\n    'unique'\n  ]);\n\n  proxyRequestMethods(Index, '_index', IDBIndex, [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  function Cursor(cursor, request) {\n    this._cursor = cursor;\n    this._request = request;\n  }\n\n  proxyProperties(Cursor, '_cursor', [\n    'direction',\n    'key',\n    'primaryKey',\n    'value'\n  ]);\n\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\n    'update',\n    'delete'\n  ]);\n\n  // proxy 'next' methods\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\n    if (!(methodName in IDBCursor.prototype)) return;\n    Cursor.prototype[methodName] = function() {\n      var cursor = this;\n      var args = arguments;\n      return Promise.resolve().then(function() {\n        cursor._cursor[methodName].apply(cursor._cursor, args);\n        return promisifyRequest(cursor._request).then(function(value) {\n          if (!value) return;\n          return new Cursor(value, cursor._request);\n        });\n      });\n    };\n  });\n\n  function ObjectStore(store) {\n    this._store = store;\n  }\n\n  ObjectStore.prototype.createIndex = function() {\n    return new Index(this._store.createIndex.apply(this._store, arguments));\n  };\n\n  ObjectStore.prototype.index = function() {\n    return new Index(this._store.index.apply(this._store, arguments));\n  };\n\n  proxyProperties(ObjectStore, '_store', [\n    'name',\n    'keyPath',\n    'indexNames',\n    'autoIncrement'\n  ]);\n\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'put',\n    'add',\n    'delete',\n    'clear',\n    'get',\n    'getAll',\n    'getKey',\n    'getAllKeys',\n    'count'\n  ]);\n\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\n    'openCursor',\n    'openKeyCursor'\n  ]);\n\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\n    'deleteIndex'\n  ]);\n\n  function Transaction(idbTransaction) {\n    this._tx = idbTransaction;\n    this.complete = new Promise(function(resolve, reject) {\n      idbTransaction.oncomplete = function() {\n        resolve();\n      };\n      idbTransaction.onerror = function() {\n        reject(idbTransaction.error);\n      };\n      idbTransaction.onabort = function() {\n        reject(idbTransaction.error);\n      };\n    });\n  }\n\n  Transaction.prototype.objectStore = function() {\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\n  };\n\n  proxyProperties(Transaction, '_tx', [\n    'objectStoreNames',\n    'mode'\n  ]);\n\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\n    'abort'\n  ]);\n\n  function UpgradeDB(db, oldVersion, transaction) {\n    this._db = db;\n    this.oldVersion = oldVersion;\n    this.transaction = new Transaction(transaction);\n  }\n\n  UpgradeDB.prototype.createObjectStore = function() {\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\n  };\n\n  proxyProperties(UpgradeDB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\n    'deleteObjectStore',\n    'close'\n  ]);\n\n  function DB(db) {\n    this._db = db;\n  }\n\n  DB.prototype.transaction = function() {\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\n  };\n\n  proxyProperties(DB, '_db', [\n    'name',\n    'version',\n    'objectStoreNames'\n  ]);\n\n  proxyMethods(DB, '_db', IDBDatabase, [\n    'close'\n  ]);\n\n  // Add cursor iterators\n  // TODO: remove this once browsers do the right thing with promises\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\n    [ObjectStore, Index].forEach(function(Constructor) {\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\n        var args = toArray(arguments);\n        var callback = args[args.length - 1];\n        var nativeObject = this._store || this._index;\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\n        request.onsuccess = function() {\n          callback(request.result);\n        };\n      };\n    });\n  });\n\n  // polyfill getAll\n  [Index, ObjectStore].forEach(function(Constructor) {\n    if (Constructor.prototype.getAll) return;\n    Constructor.prototype.getAll = function(query, count) {\n      var instance = this;\n      var items = [];\n\n      return new Promise(function(resolve) {\n        instance.iterateCursor(query, function(cursor) {\n          if (!cursor) {\n            resolve(items);\n            return;\n          }\n          items.push(cursor.value);\n\n          if (count !== undefined && items.length == count) {\n            resolve(items);\n            return;\n          }\n          cursor.continue();\n        });\n      });\n    };\n  });\n\n  var exp = {\n    open: function(name, version, upgradeCallback) {\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\n      var request = p.request;\n\n      request.onupgradeneeded = function(event) {\n        if (upgradeCallback) {\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\n        }\n      };\n\n      return p.then(function(db) {\n        return new DB(db);\n      });\n    },\n    delete: function(name) {\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\n    }\n  };\n\n  if (typeof module !== 'undefined') {\n    module.exports = exp;\n    module.exports.default = module.exports;\n  }\n  else {\n    self.idb = exp;\n  }\n}());\n","\r\n\r\nfunction IndexController() {\r\n  this._registerServiceWorker();\r\n}\r\n\r\nIndexController.prototype._registerServiceWorker = function() {\r\n  if (!navigator.serviceWorker) return;\r\n\r\n  var indexController = this;\r\n\r\n  navigator.serviceWorker.register('sw.js').then(function(reg) {\r\n    if (!navigator.serviceWorker.controller) {\r\n      return;\r\n    }\r\n\r\n    if (reg.waiting) {\r\n      indexController._updateReady(reg.waiting);\r\n      return;\r\n    }\r\n\r\n    if (reg.installing) {\r\n      indexController._trackInstalling(reg.installing);\r\n      return;\r\n    }\r\n\r\n    reg.addEventListener('updatefound', function() {\r\n      indexController._trackInstalling(reg.installing);\r\n    });\r\n  });\r\n\r\n  // Ensure refresh is only called once.\r\n  // This works around a bug in \"force update on reload\".\r\n  var refreshing;\r\n  navigator.serviceWorker.addEventListener('controllerchange', function() {\r\n    if (refreshing) return;\r\n    window.location.reload();\r\n    refreshing = true;\r\n  });\r\n};\r\n\r\nIndexController.prototype._trackInstalling = function(worker) {\r\n  var indexController = this;\r\n  worker.addEventListener('statechange', function() {\r\n    if (worker.state == 'installed') {\r\n      indexController._updateReady(worker);\r\n    }\r\n  });\r\n};\r\n\r\nIndexController.prototype._updateReady = function(worker) {\r\n\r\n    var toast = prompt(\"New version available, do you want to upate ?\");\r\n\r\nif (toast != null) {\r\n    worker.postMessage({action: 'skipWaiting'});\r\n}\r\n\r\n};\r\n\r\n//initialize sw\r\nconst swController = new IndexController();\r\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n\r\n    static openDatabase() {\r\n        // If the browser doesn't support service worker,\r\n        // we don't care about having a database\r\n        if (!navigator.serviceWorker) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return idb.open('koshary', 1, function (upgradeDb) {\r\n            var store = upgradeDb.createObjectStore('restaurants', {\r\n                keyPath: 'id'\r\n            });\r\n            store.createIndex('id', 'id');\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        //const port = location.port ? location.port : 8000 // Change this to your server port\n        const port = 3005; //change according to gulpfile config\n        const host = location.hostname ? location.hostname : 'localhost'\r\n        return `http://${host}:${port}/restaurants`;\n    }\r\n\r\n    /**\r\n     * Fetch all restaurants.\r\n     */\r\n    static fetchRestaurants(callback) {\r\n        fetch(DBHelper.DATABASE_URL).then((response) => {\r\n            return response.json();\r\n        }).then((json) => {\r\n\r\n            //add restuarants object array into a variable\r\n            const restaurants = json;\n            //open indexdb to cach all restaurants data\r\n            DBHelper.openDatabase().then(function (db) {\r\n                if (!db) return;\r\n                var tx = db.transaction('restaurants', 'readwrite');\r\n                var store = tx.objectStore('restaurants');\r\n                restaurants.forEach(function (restaurant) {\r\n                    store.put(restaurant);\r\n                });\r\n            });\r\n            callback(null, restaurants);\r\n\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            callback(error, null);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static fetchRestaurantById(id, callback) {\r\n        // fetch all restaurants with proper error handling.\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                const restaurant = restaurants.find(r => r.id == id);\r\n                if (restaurant) { // Got the restaurant\r\n                    callback(null, restaurant);\r\n                } else { // Restaurant does not exist in the database\r\n                    callback('Restaurant does not exist', null);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisine(cuisine, callback) {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given cuisine type\r\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given neighborhood\r\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                let results = restaurants\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\r\n    static fetchNeighborhoods(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n                callback(null, uniqueNeighborhoods);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\r\n    static fetchCuisines(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n                callback(null, uniqueCuisines);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        return (`/img/${restaurant.photograph}`);\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}\r\n","let restaurants,\n    neighborhoods,\n    cuisines\nvar map\nvar markers = []\n\n/**\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n    fetchNeighborhoods();\n    fetchCuisines();\n});\n\n/**\n * Fetch all neighborhoods and set their HTML.\n */\nconst fetchNeighborhoods = () => {\n    DBHelper.fetchNeighborhoods((error, neighborhoods) => {\n        if (error) { // Got an error\n            //console.error(error);\n        } else {\n            self.neighborhoods = neighborhoods;\n            fillNeighborhoodsHTML();\n        }\n    });\n}\n\n/**\n * Set neighborhoods HTML.\n */\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\n    const select = document.getElementById('neighborhoods-select');\n    neighborhoods.forEach(neighborhood => {\n        const option = document.createElement('option');\n        option.innerHTML = neighborhood;\n        option.value = neighborhood;\n        select.append(option);\n    });\n}\n\n/**\n * Fetch all cuisines and set their HTML.\n */\nconst fetchCuisines = () => {\n    DBHelper.fetchCuisines((error, cuisines) => {\n        if (error) { // Got an error!\n            //console.error(error);\n        } else {\n            self.cuisines = cuisines;\n            fillCuisinesHTML();\n        }\n    });\n}\n\n/**\n * Set cuisines HTML.\n */\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\n    const select = document.getElementById('cuisines-select');\n\n    cuisines.forEach(cuisine => {\n        const option = document.createElement('option');\n        option.innerHTML = cuisine;\n        option.value = cuisine;\n        select.append(option);\n    });\n}\n\n/**\n * Initialize Google map, called from HTML.\n */\nfunction initMap(){\n    debugger\n    let loc = {\n        lat: 40.722216,\n        lng: -73.987501\n    };\n    self.map = new google.maps.Map(document.getElementById('map'), {\n        zoom: 12,\n        center: loc,\n        scrollwheel: false\n    });\n    //set title for the map iframe for increased accessability\n//    setTimeout(function(){\n//            document.getElementById('map').getElementsByTagName(\"iframe\")[0].setAttribute(\"title\",\"Google Maps - An interactive map showing multiple restuarants' locations according to the filtered neighborhood and cuisine\");\n//    },10);\n    updateRestaurants();\n}\n\n/**\n * Update page and map for current restaurants.\n */\nconst updateRestaurants = () => {\n    const cSelect = document.getElementById('cuisines-select');\n    const nSelect = document.getElementById('neighborhoods-select');\n\n    const cIndex = cSelect.selectedIndex;\n    const nIndex = nSelect.selectedIndex;\n\n    const cuisine = cSelect[cIndex].value;\n    const neighborhood = nSelect[nIndex].value;\n\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\n        if (error) { // Got an error!\n            console.error(error);\n        } else {\n            resetRestaurants(restaurants);\n            fillRestaurantsHTML();\n        }\n    })\n}\n\n/**\n * Clear current restaurants, their HTML and remove their map markers.\n */\nconst resetRestaurants = (restaurants) => {\n    // Remove all restaurants\n    self.restaurants = [];\n    const ul = document.getElementById('restaurants-list');\n    ul.innerHTML = '';\n\n    // Remove all map markers\n    self.markers.forEach(m => m.setMap(null));\n    self.markers = [];\n    self.restaurants = restaurants;\n}\n\n/**\n * Create all restaurants HTML and add them to the webpage.\n */\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\n    const ul = document.getElementById('restaurants-list');\n    restaurants.forEach(restaurant => {\n        ul.append(createRestaurantHTML(restaurant));\n    });\n    addMarkersToMap();\n}\n\n/**\n * Create restaurant HTML.\n */\nconst createRestaurantHTML = (restaurant) => {\n    const li = document.createElement('li');\n    li.setAttribute(\"role\",\"listitem\")\n\n    const image = document.createElement('img');\n    image.className = 'restaurant-img';\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\n    image.srcset = restaurant.srcset;\n    image.alt = restaurant.name;\n    const picture = document.createElement('picture');\n    picture.append(image);\n    li.append(picture);\n    const dataContainer = document.createElement('article');\n    li.append(dataContainer);\n    const name = document.createElement('a');\n    name.innerHTML = restaurant.name;\n    name.href = DBHelper.urlForRestaurant(restaurant);\n    dataContainer.append(name);\n\n    const neighborhood = document.createElement('p');\n    neighborhood.setAttribute(\"title\",\"Neighborhood\");\n    neighborhood.innerHTML = restaurant.neighborhood;\n    dataContainer.append(neighborhood);\n\n    const address = document.createElement('address');\n    address.innerHTML = restaurant.address;\n    dataContainer.append(address);\n\n    const more = document.createElement('a');\n    more.innerHTML = 'View Details';\n    more.classList.add(\"more\");\n    more.setAttribute(\"role\",\"button\");\n    more.href = DBHelper.urlForRestaurant(restaurant);\n    dataContainer.append(more)\n\n    return li\n}\n\n/**\n * Add markers for current restaurants to the map.\n */\nconst addMarkersToMap = (restaurants = self.restaurants) => {\n    restaurants.forEach(restaurant => {\n        // Add marker to the map\n        const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\n        google.maps.event.addListener(marker, 'click', () => {\n            window.location.href = marker.url\n        });\n        self.markers.push(marker);\n    });\n}\n\n/*change aria expanded value*/\nconst changeAriaValue = (that) =>{\n    that.getAttribute(\"aria-expanded\") == \"true\" ? that.setAttribute(\"aria-expanded\",\"false\"):that.setAttribute(\"aria-expanded\",\"true\");\n}\n","let restaurant;\r\nvar map;\r\n\r\n\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nfunction initInnerMap () {\n    fetchRestaurantFromURL((error, restaurant) => {\r\n        if (error) { // Got an error!\r\n            //console.error(error);\n        } else {\r\n            self.map = new google.maps.Map(document.getElementById('map'), {\r\n                zoom: 16,\r\n                center: restaurant.latlng,\r\n                scrollwheel: false\r\n            });\r\n            fillBreadcrumb();\r\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nconst fetchRestaurantFromURL = (callback) => {\n    if (self.restaurant) { // restaurant already fetched!\r\n        callback(null, self.restaurant)\r\n        return;\r\n    }\r\n    const id = getParameterByName('id');\r\n    if (!id) { // no id found in URL\r\n        let error = 'No restaurant id in URL'\n        callback(error, null);\r\n    } else {\r\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n            self.restaurant = restaurant;\r\n            if (!restaurant) {\r\n                //console.error(error);\n                return;\r\n            }\r\n            fillRestaurantHTML();\r\n            callback(null, restaurant)\r\n        });\r\n    }\r\n}\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\n    const name = document.getElementById('restaurant-name');\r\n    name.innerHTML = restaurant.name;\r\n\r\n    const address = document.getElementById('restaurant-address');\r\n    address.innerHTML = restaurant.address;\r\n\r\n    const image = document.getElementById('restaurant-img');\r\n    image.className = 'restaurant-img'\r\n    image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.setAttribute(\"alt\", restaurant.name + \" Restaurant Main Image\");\r\n\r\n    const cuisine = document.getElementById('restaurant-cuisine');\r\n    cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n    // fill operating hours\r\n    if (restaurant.operating_hours) {\r\n        fillRestaurantHoursHTML();\r\n    }\r\n    // fill reviews\r\n    fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\n    const hours = document.getElementById('restaurant-hours');\r\n    for (let key in operatingHours) {\r\n        const row = document.createElement('tr');\r\n\r\n        const day = document.createElement('th');\r\n        day.setAttribute(\"role\",\"rowheader\");\r\n        day.innerHTML = key;\r\n        row.appendChild(day);\r\n\r\n        const time = document.createElement('td');\r\n        time.innerHTML = operatingHours[key];\r\n        row.appendChild(time);\r\n\r\n        hours.appendChild(row);\r\n    }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\n    const container = document.getElementById('reviews-container');\r\n    const title = document.createElement('h2');\r\n    title.innerHTML = 'Reviews';\r\n    container.appendChild(title);\r\n\r\n    if (!reviews) {\r\n        const noReviews = document.createElement('p');\r\n        noReviews.innerHTML = 'No reviews yet!';\r\n        container.appendChild(noReviews);\r\n        return;\r\n    }\r\n    const ul = document.getElementById('reviews-list');\r\n    reviews.forEach(review => {\r\n        ul.appendChild(createReviewHTML(review));\r\n    });\r\n    container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\nconst createReviewHTML = (review) => {\n    const li = document.createElement('li');\r\n    li.setAttribute(\"role\",\"listitem\")\r\n\r\n    const name = document.createElement('h3');\r\n    name.innerHTML = review.name;\r\n    li.appendChild(name);\r\n\r\n    const date = document.createElement('date');\r\n    date.innerHTML = review.date;\r\n    date.setAttribute(\"datetime\", review.date)\r\n    li.appendChild(date);\r\n\r\n    const rating = document.createElement('p');\r\n    rating.setAttribute(\"title\", \"1 to 5 rating\");\r\n    rating.innerHTML = `Rating: ${review.rating}`;\r\n    li.appendChild(rating);\r\n\r\n    const comments = document.createElement('p');\r\n    comments.innerHTML = review.comments;\r\n    li.appendChild(comments);\r\n\r\n    return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\n    const breadcrumb = document.getElementById('breadcrumb');\r\n    const li = document.createElement('li');\r\n    li.innerHTML = restaurant.name;\r\n    li.setAttribute(\"aria-current\",\"page\");\r\n    breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nconst getParameterByName = (name, url) => {\n    if (!url)\r\n        url = window.location.href;\r\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n        results = regex.exec(url);\r\n    if (!results)\r\n        return null;\r\n    if (!results[2])\r\n        return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n"]}