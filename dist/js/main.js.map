{"version":3,"sources":["blazy.js","idb.js","swhelper.js","dbhelper.js","index.js","restaurant_info.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACvpfile":"main.js","sourcesContent":["/*!\n  hey, [be]Lazy.js - v1.8.2 - 2016.10.25\n  A fast, small and dependency free lazy load script (https://github.com/dinbror/blazy)\n  (c) Bjoern Klinggaard - @bklinggaard - http://dinbror.dk/blazy\n*/\n  (function(q,m){\"function\"===typeof define&&define.amd?define(m):\"object\"===typeof exports?module.exports=m():q.Blazy=m()})(this,function(){function q(b){var c=b._util;c.elements=E(b.options);c.count=c.elements.length;c.destroyed&&(c.destroyed=!1,b.options.container&&l(b.options.container,function(a){n(a,\"scroll\",c.validateT)}),n(window,\"resize\",c.saveViewportOffsetT),n(window,\"resize\",c.validateT),n(window,\"scroll\",c.validateT));m(b)}function m(b){for(var c=b._util,a=0;a<c.count;a++){var d=c.elements[a],e;a:{var g=d;e=b.options;var p=g.getBoundingClientRect();if(e.container&&y&&(g=g.closest(e.containerClass))){g=g.getBoundingClientRect();e=r(g,f)?r(p,{top:g.top-e.offset,right:g.right+e.offset,bottom:g.bottom+e.offset,left:g.left-e.offset}):!1;break a}e=r(p,f)}if(e||t(d,b.options.successClass))b.load(d),c.elements.splice(a,1),c.count--,a--}0===c.count&&b.destroy()}function r(b,c){return b.right>=c.left&&b.bottom>=c.top&&b.left<=c.right&&b.top<=c.bottom}function z(b,c,a){if(!t(b,a.successClass)&&(c||a.loadInvisible||0<b.offsetWidth&&0<b.offsetHeight))if(c=b.getAttribute(u)||b.getAttribute(a.src)){c=c.split(a.separator);var d=c[A&&1<c.length?1:0],e=b.getAttribute(a.srcset),g=\"img\"===b.nodeName.toLowerCase(),p=(c=b.parentNode)&&\"picture\"===c.nodeName.toLowerCase();if(g||void 0===b.src){var h=new Image,w=function(){a.error&&a.error(b,\"invalid\");v(b,a.errorClass);k(h,\"error\",w);k(h,\"load\",f)},f=function(){g?p||B(b,d,e):b.style.backgroundImage='url(\"'+d+'\")';x(b,a);k(h,\"load\",f);k(h,\"error\",w)};p&&(h=b,l(c.getElementsByTagName(\"source\"),function(b){var c=a.srcset,e=b.getAttribute(c);e&&(b.setAttribute(\"srcset\",e),b.removeAttribute(c))}));n(h,\"error\",w);n(h,\"load\",f);B(h,d,e)}else b.src=d,x(b,a)}else\"video\"===b.nodeName.toLowerCase()?(l(b.getElementsByTagName(\"source\"),function(b){var c=a.src,e=b.getAttribute(c);e&&(b.setAttribute(\"src\",e),b.removeAttribute(c))}),b.load(),x(b,a)):(a.error&&a.error(b,\"missing\"),v(b,a.errorClass))}function x(b,c){v(b,c.successClass);c.success&&c.success(b);b.removeAttribute(c.src);b.removeAttribute(c.srcset);l(c.breakpoints,function(a){b.removeAttribute(a.src)})}function B(b,c,a){a&&b.setAttribute(\"srcset\",a);b.src=c}function t(b,c){return-1!==(\" \"+b.className+\" \").indexOf(\" \"+c+\" \")}function v(b,c){t(b,c)||(b.className+=\" \"+c)}function E(b){var c=[];b=b.root.querySelectorAll(b.selector);for(var a=b.length;a--;c.unshift(b[a]));return c}function C(b){f.bottom=(window.innerHeight||document.documentElement.clientHeight)+b;f.right=(window.innerWidth||document.documentElement.clientWidth)+b}function n(b,c,a){b.attachEvent?b.attachEvent&&b.attachEvent(\"on\"+c,a):b.addEventListener(c,a,{capture:!1,passive:!0})}function k(b,c,a){b.detachEvent?b.detachEvent&&b.detachEvent(\"on\"+c,a):b.removeEventListener(c,a,{capture:!1,passive:!0})}function l(b,c){if(b&&c)for(var a=b.length,d=0;d<a&&!1!==c(b[d],d);d++);}function D(b,c,a){var d=0;return function(){var e=+new Date;e-d<c||(d=e,b.apply(a,arguments))}}var u,f,A,y;return function(b){if(!document.querySelectorAll){var c=document.createStyleSheet();document.querySelectorAll=function(a,b,d,h,f){f=document.all;b=[];a=a.replace(/\\[for\\b/gi,\"[htmlFor\").split(\",\");for(d=a.length;d--;){c.addRule(a[d],\"k:v\");for(h=f.length;h--;)f[h].currentStyle.k&&b.push(f[h]);c.removeRule(0)}return b}}var a=this,d=a._util={};d.elements=[];d.destroyed=!0;a.options=b||{};a.options.error=a.options.error||!1;a.options.offset=a.options.offset||100;a.options.root=a.options.root||document;a.options.success=a.options.success||!1;a.options.selector=a.options.selector||\".b-lazy\";a.options.separator=a.options.separator||\"|\";a.options.containerClass=a.options.container;a.options.container=a.options.containerClass?document.querySelectorAll(a.options.containerClass):!1;a.options.errorClass=a.options.errorClass||\"b-error\";a.options.breakpoints=a.options.breakpoints||!1;a.options.loadInvisible=a.options.loadInvisible||!1;a.options.successClass=a.options.successClass||\"b-loaded\";a.options.validateDelay=a.options.validateDelay||25;a.options.saveViewportOffsetDelay=a.options.saveViewportOffsetDelay||50;a.options.srcset=a.options.srcset||\"data-srcset\";a.options.src=u=a.options.src||\"data-src\";y=Element.prototype.closest;A=1<window.devicePixelRatio;f={};f.top=0-a.options.offset;f.left=0-a.options.offset;a.revalidate=function(){q(a)};a.load=function(a,b){var c=this.options;void 0===a.length?z(a,b,c):l(a,function(a){z(a,b,c)})};a.destroy=function(){var a=this._util;this.options.container&&l(this.options.container,function(b){k(b,\"scroll\",a.validateT)});k(window,\"scroll\",a.validateT);k(window,\"resize\",a.validateT);k(window,\"resize\",a.saveViewportOffsetT);a.count=0;a.elements.length=0;a.destroyed=!0};d.validateT=D(function(){m(a)},a.options.validateDelay,a);d.saveViewportOffsetT=D(function(){C(a.options.offset)},a.options.saveViewportOffsetDelay,a);C(a.options.offset);l(a.options.breakpoints,function(a){if(a.width>=window.screen.width)return u=a.src,!1});setTimeout(function(){q(a)})}});","'use strict';\r\n\r\n(function() {\r\n  function toArray(arr) {\r\n    return Array.prototype.slice.call(arr);\r\n  }\r\n\r\n  function promisifyRequest(request) {\r\n    return new Promise(function(resolve, reject) {\r\n      request.onsuccess = function() {\r\n        resolve(request.result);\r\n      };\r\n\r\n      request.onerror = function() {\r\n        reject(request.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  function promisifyRequestCall(obj, method, args) {\r\n    var request;\r\n    var p = new Promise(function(resolve, reject) {\r\n      request = obj[method].apply(obj, args);\r\n      promisifyRequest(request).then(resolve, reject);\r\n    });\r\n\r\n    p.request = request;\r\n    return p;\r\n  }\r\n\r\n  function promisifyCursorRequestCall(obj, method, args) {\r\n    var p = promisifyRequestCall(obj, method, args);\r\n    return p.then(function(value) {\r\n      if (!value) return;\r\n      return new Cursor(value, p.request);\r\n    });\r\n  }\r\n\r\n  function proxyProperties(ProxyClass, targetProp, properties) {\r\n    properties.forEach(function(prop) {\r\n      Object.defineProperty(ProxyClass.prototype, prop, {\r\n        get: function() {\r\n          return this[targetProp][prop];\r\n        },\r\n        set: function(val) {\r\n          this[targetProp][prop] = val;\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  function proxyRequestMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return promisifyRequestCall(this[targetProp], prop, arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function proxyMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return this[targetProp][prop].apply(this[targetProp], arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function proxyCursorRequestMethods(ProxyClass, targetProp, Constructor, properties) {\r\n    properties.forEach(function(prop) {\r\n      if (!(prop in Constructor.prototype)) return;\r\n      ProxyClass.prototype[prop] = function() {\r\n        return promisifyCursorRequestCall(this[targetProp], prop, arguments);\r\n      };\r\n    });\r\n  }\r\n\r\n  function Index(index) {\r\n    this._index = index;\r\n  }\r\n\r\n  proxyProperties(Index, '_index', [\r\n    'name',\r\n    'keyPath',\r\n    'multiEntry',\r\n    'unique'\r\n  ]);\r\n\r\n  proxyRequestMethods(Index, '_index', IDBIndex, [\r\n    'get',\r\n    'getKey',\r\n    'getAll',\r\n    'getAllKeys',\r\n    'count'\r\n  ]);\r\n\r\n  proxyCursorRequestMethods(Index, '_index', IDBIndex, [\r\n    'openCursor',\r\n    'openKeyCursor'\r\n  ]);\r\n\r\n  function Cursor(cursor, request) {\r\n    this._cursor = cursor;\r\n    this._request = request;\r\n  }\r\n\r\n  proxyProperties(Cursor, '_cursor', [\r\n    'direction',\r\n    'key',\r\n    'primaryKey',\r\n    'value'\r\n  ]);\r\n\r\n  proxyRequestMethods(Cursor, '_cursor', IDBCursor, [\r\n    'update',\r\n    'delete'\r\n  ]);\r\n\r\n  // proxy 'next' methods\r\n  ['advance', 'continue', 'continuePrimaryKey'].forEach(function(methodName) {\r\n    if (!(methodName in IDBCursor.prototype)) return;\r\n    Cursor.prototype[methodName] = function() {\r\n      var cursor = this;\r\n      var args = arguments;\r\n      return Promise.resolve().then(function() {\r\n        cursor._cursor[methodName].apply(cursor._cursor, args);\r\n        return promisifyRequest(cursor._request).then(function(value) {\r\n          if (!value) return;\r\n          return new Cursor(value, cursor._request);\r\n        });\r\n      });\r\n    };\r\n  });\r\n\r\n  function ObjectStore(store) {\r\n    this._store = store;\r\n  }\r\n\r\n  ObjectStore.prototype.createIndex = function() {\r\n    return new Index(this._store.createIndex.apply(this._store, arguments));\r\n  };\r\n\r\n  ObjectStore.prototype.index = function() {\r\n    return new Index(this._store.index.apply(this._store, arguments));\r\n  };\r\n\r\n  proxyProperties(ObjectStore, '_store', [\r\n    'name',\r\n    'keyPath',\r\n    'indexNames',\r\n    'autoIncrement'\r\n  ]);\r\n\r\n  proxyRequestMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'put',\r\n    'add',\r\n    'delete',\r\n    'clear',\r\n    'get',\r\n    'getAll',\r\n    'getKey',\r\n    'getAllKeys',\r\n    'count'\r\n  ]);\r\n\r\n  proxyCursorRequestMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'openCursor',\r\n    'openKeyCursor'\r\n  ]);\r\n\r\n  proxyMethods(ObjectStore, '_store', IDBObjectStore, [\r\n    'deleteIndex'\r\n  ]);\r\n\r\n  function Transaction(idbTransaction) {\r\n    this._tx = idbTransaction;\r\n    this.complete = new Promise(function(resolve, reject) {\r\n      idbTransaction.oncomplete = function() {\r\n        resolve();\r\n      };\r\n      idbTransaction.onerror = function() {\r\n        reject(idbTransaction.error);\r\n      };\r\n      idbTransaction.onabort = function() {\r\n        reject(idbTransaction.error);\r\n      };\r\n    });\r\n  }\r\n\r\n  Transaction.prototype.objectStore = function() {\r\n    return new ObjectStore(this._tx.objectStore.apply(this._tx, arguments));\r\n  };\r\n\r\n  proxyProperties(Transaction, '_tx', [\r\n    'objectStoreNames',\r\n    'mode'\r\n  ]);\r\n\r\n  proxyMethods(Transaction, '_tx', IDBTransaction, [\r\n    'abort'\r\n  ]);\r\n\r\n  function UpgradeDB(db, oldVersion, transaction) {\r\n    this._db = db;\r\n    this.oldVersion = oldVersion;\r\n    this.transaction = new Transaction(transaction);\r\n  }\r\n\r\n  UpgradeDB.prototype.createObjectStore = function() {\r\n    return new ObjectStore(this._db.createObjectStore.apply(this._db, arguments));\r\n  };\r\n\r\n  proxyProperties(UpgradeDB, '_db', [\r\n    'name',\r\n    'version',\r\n    'objectStoreNames'\r\n  ]);\r\n\r\n  proxyMethods(UpgradeDB, '_db', IDBDatabase, [\r\n    'deleteObjectStore',\r\n    'close'\r\n  ]);\r\n\r\n  function DB(db) {\r\n    this._db = db;\r\n  }\r\n\r\n  DB.prototype.transaction = function() {\r\n    return new Transaction(this._db.transaction.apply(this._db, arguments));\r\n  };\r\n\r\n  proxyProperties(DB, '_db', [\r\n    'name',\r\n    'version',\r\n    'objectStoreNames'\r\n  ]);\r\n\r\n  proxyMethods(DB, '_db', IDBDatabase, [\r\n    'close'\r\n  ]);\r\n\r\n  // Add cursor iterators\r\n  // TODO: remove this once browsers do the right thing with promises\r\n  ['openCursor', 'openKeyCursor'].forEach(function(funcName) {\r\n    [ObjectStore, Index].forEach(function(Constructor) {\r\n      Constructor.prototype[funcName.replace('open', 'iterate')] = function() {\r\n        var args = toArray(arguments);\r\n        var callback = args[args.length - 1];\r\n        var nativeObject = this._store || this._index;\r\n        var request = nativeObject[funcName].apply(nativeObject, args.slice(0, -1));\r\n        request.onsuccess = function() {\r\n          callback(request.result);\r\n        };\r\n      };\r\n    });\r\n  });\r\n\r\n  // polyfill getAll\r\n  [Index, ObjectStore].forEach(function(Constructor) {\r\n    if (Constructor.prototype.getAll) return;\r\n    Constructor.prototype.getAll = function(query, count) {\r\n      var instance = this;\r\n      var items = [];\r\n\r\n      return new Promise(function(resolve) {\r\n        instance.iterateCursor(query, function(cursor) {\r\n          if (!cursor) {\r\n            resolve(items);\r\n            return;\r\n          }\r\n          items.push(cursor.value);\r\n\r\n          if (count !== undefined && items.length == count) {\r\n            resolve(items);\r\n            return;\r\n          }\r\n          cursor.continue();\r\n        });\r\n      });\r\n    };\r\n  });\r\n\r\n  var exp = {\r\n    open: function(name, version, upgradeCallback) {\r\n      var p = promisifyRequestCall(indexedDB, 'open', [name, version]);\r\n      var request = p.request;\r\n\r\n      request.onupgradeneeded = function(event) {\r\n        if (upgradeCallback) {\r\n          upgradeCallback(new UpgradeDB(request.result, event.oldVersion, request.transaction));\r\n        }\r\n      };\r\n\r\n      return p.then(function(db) {\r\n        return new DB(db);\r\n      });\r\n    },\r\n    delete: function(name) {\r\n      return promisifyRequestCall(indexedDB, 'deleteDatabase', [name]);\r\n    }\r\n  };\r\n\r\n  if (typeof module !== 'undefined') {\r\n    module.exports = exp;\r\n    module.exports.default = module.exports;\r\n  }\r\n  else {\r\n    self.idb = exp;\r\n  }\r\n}());\r\n","\r\n\r\nfunction IndexController() {\r\n  this._registerServiceWorker();\r\n}\r\n\r\nIndexController.prototype._registerServiceWorker = function() {\r\n  if (!navigator.serviceWorker) return;\r\n\r\n  var indexController = this;\r\n\r\n  navigator.serviceWorker.register('sw.js').then(function(reg) {\r\n    if (!navigator.serviceWorker.controller) {\r\n      return;\r\n    }\r\n\r\n    if (reg.waiting) {\r\n      indexController._updateReady(reg.waiting);\r\n      return;\r\n    }\r\n\r\n    if (reg.installing) {\r\n      indexController._trackInstalling(reg.installing);\r\n      return;\r\n    }\r\n\r\n    reg.addEventListener('updatefound', function() {\r\n      indexController._trackInstalling(reg.installing);\r\n    });\r\n  });\r\n\r\n  // Ensure refresh is only called once.\r\n  // This works around a bug in \"force update on reload\".\r\n  var refreshing;\r\n  navigator.serviceWorker.addEventListener('controllerchange', function() {\r\n    if (refreshing) return;\r\n    window.location.reload();\r\n    refreshing = true;\r\n  });\r\n};\r\n\r\nIndexController.prototype._trackInstalling = function(worker) {\r\n  var indexController = this;\r\n  worker.addEventListener('statechange', function() {\r\n    if (worker.state == 'installed') {\r\n      indexController._updateReady(worker);\r\n    }\r\n  });\r\n};\r\n\r\nIndexController.prototype._updateReady = function(worker) {\r\n\r\n    var toast = prompt(\"New version available, do you want to upate ?\");\r\n\r\nif (toast != null) {\r\n    worker.postMessage({action: 'skipWaiting'});\r\n}\r\n\r\n};\r\n\r\n//initialize sw\r\nconst swController = new IndexController();\r\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n\r\n    static openDatabase() {\r\n        // If the browser doesn't support service worker,\r\n        // we don't care about having a database\r\n        if (!navigator.serviceWorker) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return idb.open('koshary', 1, function (upgradeDb) {\r\n            var store = upgradeDb.createObjectStore('restaurants', {\r\n                keyPath: 'id'\r\n            });\r\n            store.createIndex('id', 'id');\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        //const port = location.port ? location.port : 8000 // Change this to your server port\r\n        const port = 3005; //change according to gulpfile config\r\n        const host = location.hostname ? location.hostname : 'localhost'\r\n        return `http://${host}:${port}/restaurants`;\r\n    }\r\n\r\n    /**\r\n     * Fetch all restaurants.\r\n     */\r\n    static fetchRestaurants(callback) {\r\n        fetch(DBHelper.DATABASE_URL).then((response) => {\r\n            return response.json();\r\n        }).then((json) => {\r\n\r\n            //add restuarants object array into a variable\r\n            const restaurants = json;\r\n            //open indexdb to cach all restaurants data\r\n            DBHelper.openDatabase().then(function (db) {\r\n                if (!db) return;\r\n                var tx = db.transaction('restaurants', 'readwrite');\r\n                var store = tx.objectStore('restaurants');\r\n                restaurants.forEach(function (restaurant) {\r\n                    store.put(restaurant);\r\n                });\r\n            });\r\n            callback(null, restaurants);\r\n\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            callback(error, null);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static fetchRestaurantById(id, callback) {\r\n        // fetch all restaurants with proper error handling.\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                const restaurant = restaurants.find(r => r.id == id);\r\n                if (restaurant) { // Got the restaurant\r\n                    callback(null, restaurant);\r\n                } else { // Restaurant does not exist in the database\r\n                    callback('Restaurant does not exist', null);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisine(cuisine, callback) {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given cuisine type\r\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given neighborhood\r\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                let results = restaurants\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\r\n    static fetchNeighborhoods(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n                callback(null, uniqueNeighborhoods);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\r\n    static fetchCuisines(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n                callback(null, uniqueCuisines);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        return (`/img/${restaurant.photograph}`);\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}\r\n","let restaurants,\r\n    neighborhoods,\r\n    cuisines\r\nvar map\r\nvar markers = []\r\n\r\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n});\r\n\r\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\r\nconst fetchNeighborhoods = () => {\r\n    DBHelper.fetchNeighborhoods((error, neighborhoods) => {\r\n        if (error) { // Got an error\r\n            //console.error(error);\r\n        } else {\r\n            self.neighborhoods = neighborhoods;\r\n            fillNeighborhoodsHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set neighborhoods HTML.\r\n */\r\nconst fillNeighborhoodsHTML = (neighborhoods = self.neighborhoods) => {\r\n    const select = document.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = neighborhood;\r\n        option.value = neighborhood;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\r\nconst fetchCuisines = () => {\r\n    DBHelper.fetchCuisines((error, cuisines) => {\r\n        if (error) { // Got an error!\r\n            //console.error(error);\r\n        } else {\r\n            self.cuisines = cuisines;\r\n            fillCuisinesHTML();\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Set cuisines HTML.\r\n */\r\nconst fillCuisinesHTML = (cuisines = self.cuisines) => {\r\n    const select = document.getElementById('cuisines-select');\r\n\r\n    cuisines.forEach(cuisine => {\r\n        const option = document.createElement('option');\r\n        option.innerHTML = cuisine;\r\n        option.value = cuisine;\r\n        select.append(option);\r\n    });\r\n}\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nfunction initMap(){\r\n    debugger\r\n    let loc = {\r\n        lat: 40.722216,\r\n        lng: -73.987501\r\n    };\r\n    self.map = new google.maps.Map(document.getElementById('map'), {\r\n        zoom: 12,\r\n        center: loc,\r\n        scrollwheel: false\r\n    });\r\n    //set title for the map iframe for increased accessability\r\n//    setTimeout(function(){\r\n//            document.getElementById('map').getElementsByTagName(\"iframe\")[0].setAttribute(\"title\",\"Google Maps - An interactive map showing multiple restuarants' locations according to the filtered neighborhood and cuisine\");\r\n//    },10);\r\n    updateRestaurants();\r\n}\r\n\r\n/**\r\n * Update page and map for current restaurants.\r\n */\r\nconst updateRestaurants = () => {\r\n    const cSelect = document.getElementById('cuisines-select');\r\n    const nSelect = document.getElementById('neighborhoods-select');\r\n\r\n    const cIndex = cSelect.selectedIndex;\r\n    const nIndex = nSelect.selectedIndex;\r\n\r\n    const cuisine = cSelect[cIndex].value;\r\n    const neighborhood = nSelect[nIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, (error, restaurants) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            resetRestaurants(restaurants);\r\n            fillRestaurantsHTML();\r\n        }\r\n    })\r\n}\r\n\r\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\r\nconst resetRestaurants = (restaurants) => {\r\n    // Remove all restaurants\r\n    self.restaurants = [];\r\n    const ul = document.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n\r\n    // Remove all map markers\r\n    self.markers.forEach(m => m.setMap(null));\r\n    self.markers = [];\r\n    self.restaurants = restaurants;\r\n}\r\n\r\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\r\nconst fillRestaurantsHTML = (restaurants = self.restaurants) => {\r\n    const ul = document.getElementById('restaurants-list');\r\n    restaurants.forEach(restaurant => {\r\n        ul.append(createRestaurantHTML(restaurant));\r\n    });\r\n    addMarkersToMap();\r\n}\r\n\r\n/**\r\n * Create restaurant HTML.\r\n */\r\nconst createRestaurantHTML = (restaurant) => {\r\n    const li = document.createElement('li');\r\n    li.setAttribute(\"role\",\"listitem\")\r\n\r\n    const image = document.createElement('img');\r\n    const imageSrc= DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.className = 'restaurant-img';\r\n    image.setAttribute(\"data-src\",`img/${imageSrc}`);\r\n    image.setAttribute(\"data-src-small\",`img/${restaurant.id}_300.jpg`);\r\n    image.setAttribute(\"data-src-medium\",`img/${restaurant.id}_580.jpg`);\r\n    image.setAttribute(\"data-src-large\",`img/${restaurant.id}_800.jpg`);\r\n    image.alt = restaurant.name;\r\n    const picture = document.createElement('picture');\r\n    picture.append(image);\r\n    li.append(picture);\r\n    const dataContainer = document.createElement('article');\r\n    li.append(dataContainer);\r\n    const name = document.createElement('a');\r\n    name.innerHTML = restaurant.name;\r\n    name.href = DBHelper.urlForRestaurant(restaurant);\r\n    dataContainer.append(name);\r\n\r\n    const neighborhood = document.createElement('p');\r\n    neighborhood.setAttribute(\"title\",\"Neighborhood\");\r\n    neighborhood.innerHTML = restaurant.neighborhood;\r\n    dataContainer.append(neighborhood);\r\n\r\n    const address = document.createElement('address');\r\n    address.innerHTML = restaurant.address;\r\n    dataContainer.append(address);\r\n\r\n    const more = document.createElement('a');\r\n    more.innerHTML = 'View Details';\r\n    more.classList.add(\"more\");\r\n    more.setAttribute(\"role\",\"button\");\r\n    more.href = DBHelper.urlForRestaurant(restaurant);\r\n    dataContainer.append(more)\r\n\r\n    return li\r\n}\r\n\r\n/**\r\n * Add markers for current restaurants to the map.\r\n */\r\nconst addMarkersToMap = (restaurants = self.restaurants) => {\r\n    restaurants.forEach(restaurant => {\r\n        // Add marker to the map\r\n        const marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\r\n        google.maps.event.addListener(marker, 'click', () => {\r\n            window.location.href = marker.url\r\n        });\r\n        self.markers.push(marker);\r\n    });\r\n}\r\n\r\n/*change aria expanded value*/\r\nconst changeAriaValue = (that) =>{\r\n    that.getAttribute(\"aria-expanded\") == \"true\" ? that.setAttribute(\"aria-expanded\",\"false\"):that.setAttribute(\"aria-expanded\",\"true\");\r\n}\r\n\r\n","let restaurant;\r\nvar map;\r\n\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\nfunction initInnerMap () {\r\n    fetchRestaurantFromURL((error, restaurant) => {\r\n        if (error) { // Got an error!\r\n            //console.error(error);\r\n        } else {\r\n            self.map = new google.maps.Map(document.getElementById('map'), {\r\n                zoom: 16,\r\n                center: restaurant.latlng,\r\n                scrollwheel: false\r\n            });\r\n            fillBreadcrumb();\r\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nconst fetchRestaurantFromURL = (callback) => {\r\n    if (self.restaurant) { // restaurant already fetched!\r\n        callback(null, self.restaurant)\r\n        return;\r\n    }\r\n    const id = getParameterByName('id');\r\n    if (!id) { // no id found in URL\r\n        let error = 'No restaurant id in URL'\r\n        callback(error, null);\r\n    } else {\r\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n            self.restaurant = restaurant;\r\n            if (!restaurant) {\r\n                //console.error(error);\r\n                return;\r\n            }\r\n            fillRestaurantHTML();\r\n            callback(null, restaurant)\r\n        });\r\n    }\r\n}\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n    const name = document.getElementById('restaurant-name');\r\n    name.innerHTML = restaurant.name;\r\n\r\n    const address = document.getElementById('restaurant-address');\r\n    address.innerHTML = restaurant.address;\r\n\r\n    const image = document.getElementById('restaurant-img');\r\n    image.className = 'restaurant-img'\r\n    //image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.setAttribute(\"data-src\",`img/${DBHelper.imageUrlForRestaurant(restaurant)}`);\r\n    image.setAttribute(\"data-src-small\",`img/${restaurant.id}_300.jpg`);\r\n    image.setAttribute(\"data-src-medium\",`img/${restaurant.id}_580.jpg`);\r\n    image.setAttribute(\"data-src-large\",`img/${restaurant.id}_800.jpg`);\r\n    image.setAttribute(\"alt\", restaurant.name + \" Restaurant Main Image\");\r\n\r\n    const cuisine = document.getElementById('restaurant-cuisine');\r\n    cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n    // fill operating hours\r\n    if (restaurant.operating_hours) {\r\n        fillRestaurantHoursHTML();\r\n    }\r\n    // fill reviews\r\n    fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n    const hours = document.getElementById('restaurant-hours');\r\n    for (let key in operatingHours) {\r\n        const row = document.createElement('tr');\r\n\r\n        const day = document.createElement('th');\r\n        day.setAttribute(\"role\",\"rowheader\");\r\n        day.innerHTML = key;\r\n        row.appendChild(day);\r\n\r\n        const time = document.createElement('td');\r\n        time.innerHTML = operatingHours[key];\r\n        row.appendChild(time);\r\n\r\n        hours.appendChild(row);\r\n    }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n    const container = document.getElementById('reviews-container');\r\n    const title = document.createElement('h2');\r\n    title.innerHTML = 'Reviews';\r\n    container.appendChild(title);\r\n\r\n    if (!reviews) {\r\n        const noReviews = document.createElement('p');\r\n        noReviews.innerHTML = 'No reviews yet!';\r\n        container.appendChild(noReviews);\r\n        return;\r\n    }\r\n    const ul = document.getElementById('reviews-list');\r\n    reviews.forEach(review => {\r\n        ul.appendChild(createReviewHTML(review));\r\n    });\r\n    container.appendChild(ul);\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\nconst createReviewHTML = (review) => {\r\n    const li = document.createElement('li');\r\n    li.setAttribute(\"role\",\"listitem\")\r\n\r\n    const name = document.createElement('h3');\r\n    name.innerHTML = review.name;\r\n    li.appendChild(name);\r\n\r\n    const date = document.createElement('date');\r\n    date.innerHTML = review.date;\r\n    date.setAttribute(\"datetime\", review.date)\r\n    li.appendChild(date);\r\n\r\n    const rating = document.createElement('p');\r\n    rating.setAttribute(\"title\", \"1 to 5 rating\");\r\n    rating.innerHTML = `Rating: ${review.rating}`;\r\n    li.appendChild(rating);\r\n\r\n    const comments = document.createElement('p');\r\n    comments.innerHTML = review.comments;\r\n    li.appendChild(comments);\r\n\r\n    return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\r\n    const breadcrumb = document.getElementById('breadcrumb');\r\n    const li = document.createElement('li');\r\n    li.innerHTML = restaurant.name;\r\n    li.setAttribute(\"aria-current\",\"page\");\r\n    breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nconst getParameterByName = (name, url) => {\r\n    if (!url)\r\n        url = window.location.href;\r\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n        results = regex.exec(url);\r\n    if (!results)\r\n        return null;\r\n    if (!results[2])\r\n        return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n\r\n//lazy load images\r\n//let bLazy = new Blazy({\r\n//        breakpoints: [{\r\n//\t    width: 300 // Max-width\r\n//          , src: 'data-src-small'\r\n//\t},{\r\n//\t    width: 580 // Max-width\r\n//          , src: 'data-src-medium'\r\n//\t},{\r\n//\t    width: 800 // Max-width\r\n//          , src: 'data-src-large'\r\n//\t}]\r\n//   });"]}