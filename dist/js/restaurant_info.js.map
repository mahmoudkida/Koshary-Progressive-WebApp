{"version":3,"sources":["swhelper.js","dbhelper.js","restaurant_info.js"],"names":["IndexController","this","_registerServiceWorker","prototype","navigator","serviceWorker","refreshing","indexController","register","then","reg","controller","waiting","_updateReady","installing","_trackInstalling","addEventListener","window","location","reload","worker","state","confirm","postMessage","action","swController","DBHelper","idb","open","upgradeDb","createObjectStore","keyPath","createIndex","Promise","resolve","callback","fetch","DATABASE_URL","response","json","restaurants","openDatabase","db","store","transaction","objectStore","forEach","restaurant","put","catch","ex","index","getAll","id","get","fetchRestaurantById","error","is_favorite","method","tx","complete","cuisine","fetchRestaurants","results","filter","r","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","document","event","fetchRestaurantFromURL","fillBreadcrumb","initMap","self","Map","getElementById","scrollwheel","classList","add","mapMarkerForRestaurant","initStaticMap","lat","lng","offsetWidth","imageConrtainer","offsetHeight","querySelector","setAttribute","staticMapURL","getParameterByName","toast","setTimeout","bLazy","revalidate","console","fillRestaurantHTML","arguments","length","undefined","innerHTML","addTofavoriteButton","createElement","dataset","restaurantId","append","address","image","className","src","imageUrlForRestaurant","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","idIndex","day","appendChild","time","addRestaurantToFavorite","btn","toggleRestaurantFavorite","alert","remove","reviews","container","noReviews","ul","review","createReviewHTML","li","date","rating","comments","breadcrumb","href","replace","RegExp","exec","decodeURIComponent","Blazy"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["\r\n\r\nfunction IndexController() {\r\n  this._registerServiceWorker();\r\n}\r\n\r\nIndexController.prototype._registerServiceWorker = function() {\r\n  if (!navigator.serviceWorker) return;\r\n\r\n  var indexController = this;\r\n\r\n  navigator.serviceWorker.register('sw.js').then(function(reg) {\r\n    if (!navigator.serviceWorker.controller) {\r\n      return;\r\n    }\r\n\r\n    if (reg.waiting) {\r\n      indexController._updateReady(reg.waiting);\r\n      return;\r\n    }\r\n\r\n    if (reg.installing) {\r\n      indexController._trackInstalling(reg.installing);\r\n      return;\r\n    }\r\n\r\n    reg.addEventListener('updatefound', function() {\r\n      indexController._trackInstalling(reg.installing);\r\n    });\r\n  });\r\n\r\n  // Ensure refresh is only called once.\r\n  // This works around a bug in \"force update on reload\".\r\n  var refreshing;\r\n  navigator.serviceWorker.addEventListener('controllerchange', function() {\r\n    if (refreshing) return;\r\n    window.location.reload();\r\n    refreshing = true;\r\n  });\r\n};\r\n\r\nIndexController.prototype._trackInstalling = function(worker) {\r\n  var indexController = this;\r\n  worker.addEventListener('statechange', function() {\r\n    if (worker.state == 'installed') {\r\n      indexController._updateReady(worker);\r\n    }\r\n  });\r\n};\r\n\r\nIndexController.prototype._updateReady = function(worker) {\r\n\r\n    var toast = confirm(\"New version available, do you want to upate ?\");\n\r\nif (toast != null) {\r\n    worker.postMessage({action: 'skipWaiting'});\r\n}\r\n\r\n};\r\n\r\n//initialize sw\r\nconst swController = new IndexController();\r\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n\r\n    static openDatabase() {\r\n        // If the browser doesn't support service worker,\r\n        // we don't care about having a database\r\n        if (!navigator.serviceWorker) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return idb.open('koshary', 1, function (upgradeDb) {\r\n            var store = upgradeDb.createObjectStore('restaurants', {\r\n                keyPath: 'id'\r\n            });\r\n            store.createIndex('id', 'id');\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        //const port = location.port ? location.port : 8000 // Change this to your server port\r\n        const port = 1337; //change according to gulpfile config\r\n        //const host = location.hostname ? location.hostname : 'localhost';\r\n        const host = 'localhost';\r\n        return `http://${host}:${port}`;\r\n    }\r\n\r\n    /**\r\n     * Fetch all restaurants.\r\n     */\r\n    static fetchRestaurants(callback) {\r\n        fetch(DBHelper.DATABASE_URL + '/restaurants').then((response) => {\r\n            return response.json();\r\n        }).then((json) => {\r\n\r\n            //add restuarants object array into a variable\r\n            const restaurants = json;\r\n            //open indexdb to cach all restaurants data\r\n            DBHelper.openDatabase().then((db) => {\r\n                if (!db) return;\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n                restaurants.forEach(function (restaurant) {\r\n                    store.put(restaurant);\r\n                });\r\n            });\r\n            callback(null, restaurants);\r\n\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            DBHelper.openDatabase().then((db) => {\r\n                if (!db) return;\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n                let idIndex = store.index(\"id\");\r\n                return idIndex.getAll();\r\n            }).then((json) => {\r\n                const restaurants = json;\r\n                callback(null, restaurants);\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static fetchRestaurantById(id, callback) {\r\n        fetch(DBHelper.DATABASE_URL + '/restaurants/' + id).then((response) => {\r\n            return response.json();\r\n        }).then((json) => {\r\n\r\n            //add restuarants object array into a variable\r\n            const restaurant = json;\r\n            callback(null, restaurant);\r\n\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            DBHelper.openDatabase().then((db) => {\r\n                if (!db) return;\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n                let idIndex = store.index(\"id\");\r\n                return idIndex.get(id);\r\n            }).then((json) => {\r\n                const restaurant = json;\r\n                callback(null, restaurant);\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static toggleRestaurantFavorite(id, callback) {\r\n        DBHelper.fetchRestaurantById(id, function (error, restaurant) {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                //send to option the opposite of what is currently set\r\n                fetch(DBHelper.DATABASE_URL + '/restaurants/' + id + '/?is_favorite=' +\r\n                    (restaurant.is_favorite == \"false\"  ? \"true\" : \"false\"), {\r\n                        method: 'POST'\r\n                    }).then((response) => {\r\n                    return response.json();\r\n                }).then((response) => {\r\n                    DBHelper.openDatabase().then((db) => {\r\n                        if (!db) return;\r\n                        let tx = db.transaction('restaurants', 'readwrite');\r\n                        let store = tx.objectStore('restaurants');\r\n                        store.put(response);\r\n                         return tx.complete;\r\n                    });\r\n                    callback(null, response);\r\n                });\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisine(cuisine, callback) {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given cuisine type\r\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given neighborhood\r\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                let results = restaurants\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\r\n    static fetchNeighborhoods(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n                callback(null, uniqueNeighborhoods);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\r\n    static fetchCuisines(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n                callback(null, uniqueCuisines);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        return (`/img/${restaurant.photograph}`);\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}\r\n","let restaurant, map;\r\n\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n\r\n    fetchRestaurantFromURL((error, restaurant) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            fillBreadcrumb();\r\n        }\r\n    });\r\n});\r\n\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\n\r\nconst initMap = () => {\r\n    if (!self.map) {\r\n        self.map = new google.maps.Map(document.getElementById('map'), {\r\n            zoom: 16,\r\n            center: restaurant.latlng,\r\n            scrollwheel: false\r\n        });\r\n    }\r\n    document.getElementById(\"map-container\").classList.add(\"show-interactive-map\");\r\n\r\n    DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n}\r\n\r\nconst initStaticMap = () => {\r\n    let latlng = `${restaurant.latlng.lat},${restaurant.latlng.lng}`,\r\n        zoom = 12,\r\n        imageConrtainer = document.getElementById(\"map-container\");\r\n    let size = imageConrtainer.offsetWidth + \"x\" + imageConrtainer.offsetHeight;\r\n    let staticMapURL = `https://maps.googleapis.com/maps/api/staticmap?center=${latlng}&zoom=${zoom}&size=${size}&key=AIzaSyD7zwXocDxCO_YLSyVhDNYZDmhMxr0RcNU`;\r\n    staticMapURL += `&markers=${restaurant.latlng.lat},${restaurant.latlng.lng}`;\r\n    document.querySelector(\".static-map\").setAttribute(\"src\", staticMapURL);\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nconst fetchRestaurantFromURL = (callback) => {\r\n    if (self.restaurant) { // restaurant already fetched!\r\n        callback(null, self.restaurant)\r\n        return;\r\n    }\r\n    const id = getParameterByName('id');\r\n    if (!id) { // no id found in URL\r\n        let error = 'No restaurant id in URL'\r\n        callback(error, null);\r\n    } else {\r\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n            self.restaurant = restaurant;\r\n            if (!restaurant) {\r\n                console.error(error);\r\n                return;\r\n            }\r\n            fillRestaurantHTML();\r\n            initStaticMap();\r\n            callback(null, restaurant);\r\n            //init lazy loading\r\n            setTimeout(function () {\r\n                bLazy.revalidate();\r\n            }, 10);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n    const name = document.getElementById('restaurant-name');\r\n    name.innerHTML = restaurant.name;\r\n    \r\n    //create favorite button\r\n    const addTofavoriteButton = document.createElement(\"button\");\r\n    addTofavoriteButton.classList.add(\"add-tofavorite\");\r\n    if(restaurant.is_favorite == \"true\" || restaurant.is_favorite == true){\r\n        addTofavoriteButton.classList.add(\"favorite\");\r\n        addTofavoriteButton.innerHTML = '<span>★</span> Favorited';\r\n        addTofavoriteButton.title = \"Click to remove from favorite\";\r\n    }\r\n    else{\r\n         addTofavoriteButton.innerHTML = '<span>☆</span> Add To Favorite';\r\n    }\r\n    addTofavoriteButton.setAttribute(\"role\", \"button\");\r\n    addTofavoriteButton.setAttribute(\"onclick\",\"addRestaurantToFavorite(this)\");\r\n    addTofavoriteButton.dataset.restaurantId = restaurant.id;\r\n    name.append(addTofavoriteButton);\r\n    \r\n    \r\n\r\n    const address = document.getElementById('restaurant-address');\r\n    address.innerHTML = restaurant.address;\r\n\r\n    const image = document.getElementById('restaurant-img');\r\n    image.className = 'restaurant-img b-lazy';\r\n    //image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.src = \"/img/placeholder-image.png\";\r\n    image.setAttribute(\"data-src\", `${DBHelper.imageUrlForRestaurant(restaurant)}`);\r\n    image.setAttribute(\"data-srcset\", `/img/${restaurant.id}_300.jpg 300w,/img/${restaurant.id}.jpg 586w,/img/${restaurant.id}_800.jpg 800w`);\r\n\r\n    //    image.setAttribute(\"data-src-small\",`img/${restaurant.id}_300.jpg`);\r\n    //    image.setAttribute(\"data-src-medium\",`img/${restaurant.id}_580.jpg`);\r\n    //    image.setAttribute(\"data-src-large\",`img/${restaurant.id}_800.jpg`);\r\n    image.setAttribute(\"alt\", `${restaurant.name}Restaurant Main Image, `);\r\n\r\n    const cuisine = document.getElementById('restaurant-cuisine');\r\n    cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n    // fill operating hours\r\n    if (restaurant.operating_hours) {\r\n        fillRestaurantHoursHTML();\r\n    }\r\n    // fill reviews\r\n    fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n    const hours = document.getElementById('restaurant-hours');\r\n    for (let key in operatingHours) {\r\n        const row = document.createElement('tr');\r\n\r\n        const day = document.createElement('th');\r\n        day.setAttribute(\"role\", \"rowheader\");\r\n        day.innerHTML = key;\r\n        row.appendChild(day);\r\n\r\n        const time = document.createElement('td');\r\n        time.innerHTML = operatingHours[key];\r\n        row.appendChild(time);\r\n\r\n        hours.appendChild(row);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Add retaurant to favorite.\r\n */\r\nconst addRestaurantToFavorite = (btn) =>{\r\n    DBHelper.toggleRestaurantFavorite(btn.dataset['restaurantId'],function(error,response){\r\n        if(error) alert(error);\r\n        if(response.is_favorite == \"false\"){\r\n            btn.classList.remove(\"favorite\");\r\n            btn.innerHTML = '<span>☆</span> Add To Favorite';\r\n        }else{\r\n            btn.innerHTML = '<span>★</span> Favorited';\r\n            btn.title = \"Click to remove from favorite\";\r\n            btn.classList.add(\"favorite\");\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n    const container = document.getElementById('reviews-container');\r\n    const title = document.createElement('h3');\r\n    title.innerHTML = 'Reviews';\r\n    container.appendChild(title);\r\n\r\n    if (!reviews) {\r\n        const noReviews = document.createElement('p');\r\n        noReviews.innerHTML = 'No reviews yet!';\r\n        container.appendChild(noReviews);\r\n        return;\r\n    }\r\n    const ul = document.getElementById('reviews-list');\r\n    reviews.forEach(review => {\r\n        ul.appendChild(createReviewHTML(review));\r\n    });\r\n\r\n    container.appendChild(ul);\r\n\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\nconst createReviewHTML = (review) => {\r\n    const li = document.createElement('li');\r\n    li.setAttribute(\"role\", \"listitem\")\r\n\r\n    const name = document.createElement('h3');\r\n    name.innerHTML = review.name;\r\n    li.appendChild(name);\r\n\r\n    const date = document.createElement('date');\r\n    date.innerHTML = review.date;\r\n    date.setAttribute(\"datetime\", review.date)\r\n    li.appendChild(date);\r\n\r\n    const rating = document.createElement('p');\r\n    rating.setAttribute(\"title\", \"1 to 5 rating\");\r\n    rating.innerHTML = `Rating: ${review.rating}`;\r\n    li.appendChild(rating);\r\n\r\n    const comments = document.createElement('p');\r\n    comments.innerHTML = review.comments;\r\n    li.appendChild(comments);\r\n\r\n    return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\r\n    const breadcrumb = document.getElementById('breadcrumb');\r\n    const li = document.createElement('li');\r\n    li.innerHTML = restaurant.name;\r\n    li.setAttribute(\"aria-current\", \"page\");\r\n    breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nconst getParameterByName = (name, url) => {\r\n    if (!url)\r\n        url = window.location.href;\r\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n        results = regex.exec(url);\r\n    if (!results)\r\n        return null;\r\n    if (!results[2])\r\n        return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n\r\n\r\nconst bLazy = new Blazy({\r\n    // Options\r\n});\r\n"]}