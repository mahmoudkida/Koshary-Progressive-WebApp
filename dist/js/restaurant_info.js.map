{"version":3,"sources":["swhelper.js","restaurant_info.js","dbhelper.js"],"names":["IndexController","this","_registerServiceWorker","prototype","navigator","serviceWorker","refreshing","indexController","register","then","reg","controller","waiting","_updateReady","installing","_trackInstalling","addEventListener","window","location","reload","worker","state","confirm","postMessage","action","swController","map","DBHelper","idb","open","upgradeDb","createObjectStore","keyPath","createIndex","Promise","resolve","callback","fetch","DATABASE_URL","response","json","restaurants","openDatabase","db","store","transaction","objectStore","forEach","restaurant","put","catch","ex","index","getAll","id","fetchRestaurants","error","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","hostname","initMap","fetchRestaurantFromURL","self","Map","document","getElementById","zoom","center","fillBreadcrumb","mapMarkerForRestaurant","getParameterByName","fetchRestaurantById","console","fillRestaurantHTML","arguments","length","undefined","innerHTML","address","image","className","src","setAttribute","imageUrlForRestaurant","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","row","createElement","day","key","appendChild","time","reviews","container","noReviews","review","ul","createReviewHTML","setTimeout","bLazy","revalidate","li","date","rating","comments","breadcrumb","href","replace","RegExp","exec","decodeURIComponent","Blazy"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["\r\n\r\nfunction IndexController() {\r\n  this._registerServiceWorker();\r\n}\r\n\r\nIndexController.prototype._registerServiceWorker = function() {\r\n  if (!navigator.serviceWorker) return;\r\n\r\n  var indexController = this;\r\n\r\n  navigator.serviceWorker.register('sw.js').then(function(reg) {\r\n    if (!navigator.serviceWorker.controller) {\r\n      return;\r\n    }\r\n\r\n    if (reg.waiting) {\r\n      indexController._updateReady(reg.waiting);\r\n      return;\r\n    }\r\n\r\n    if (reg.installing) {\r\n      indexController._trackInstalling(reg.installing);\r\n      return;\r\n    }\r\n\r\n    reg.addEventListener('updatefound', function() {\r\n      indexController._trackInstalling(reg.installing);\r\n    });\r\n  });\r\n\r\n  // Ensure refresh is only called once.\r\n  // This works around a bug in \"force update on reload\".\r\n  var refreshing;\r\n  navigator.serviceWorker.addEventListener('controllerchange', function() {\r\n    if (refreshing) return;\r\n    window.location.reload();\r\n    refreshing = true;\r\n  });\r\n};\r\n\r\nIndexController.prototype._trackInstalling = function(worker) {\r\n  var indexController = this;\r\n  worker.addEventListener('statechange', function() {\r\n    if (worker.state == 'installed') {\r\n      indexController._updateReady(worker);\r\n    }\r\n  });\r\n};\r\n\r\nIndexController.prototype._updateReady = function(worker) {\r\n\r\n    var toast = confirm(\"New version available, do you want to upate ?\");\n\r\nif (toast != null) {\r\n    worker.postMessage({action: 'skipWaiting'});\r\n}\r\n\r\n};\r\n\r\n//initialize sw\r\nconst swController = new IndexController();\r\n","let restaurant;\r\nvar map;\r\n\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\n\r\nconst initMap = () => {\r\n    fetchRestaurantFromURL((error, restaurant) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            self.map = new google.maps.Map(document.getElementById('map'), {\r\n                zoom: 16,\r\n                center: restaurant.latlng,\r\n                scrollwheel: false\r\n            });\r\n            fillBreadcrumb();\r\n            DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nconst fetchRestaurantFromURL = (callback) => {\r\n    if (self.restaurant) { // restaurant already fetched!\r\n        callback(null, self.restaurant)\r\n        return;\r\n    }\r\n    const id = getParameterByName('id');\r\n    if (!id) { // no id found in URL\r\n        let error = 'No restaurant id in URL'\r\n        callback(error, null);\r\n    } else {\r\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n            self.restaurant = restaurant;\r\n            if (!restaurant) {\r\n                console.error(error);\r\n                return;\r\n            }\r\n            fillRestaurantHTML();\r\n            callback(null, restaurant)\r\n        });\r\n    }\r\n}\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n    const name = document.getElementById('restaurant-name');\r\n    name.innerHTML = restaurant.name;\r\n\r\n    const address = document.getElementById('restaurant-address');\r\n    address.innerHTML = restaurant.address;\r\n\r\n    const image = document.getElementById('restaurant-img');\r\n    image.className = 'restaurant-img b-lazy';\r\n    //image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.src = \"/img/placeholder-image.png\";\r\n    image.setAttribute(\"data-src\", `${DBHelper.imageUrlForRestaurant(restaurant)}`);\r\n    image.setAttribute(\"data-srcset\", `/img/${restaurant.id}_300.jpg 300w,/img/${restaurant.id}.jpg 586w,/img/${restaurant.id}_800.jpg 800w`);\r\n\r\n    //    image.setAttribute(\"data-src-small\",`img/${restaurant.id}_300.jpg`);\r\n    //    image.setAttribute(\"data-src-medium\",`img/${restaurant.id}_580.jpg`);\r\n    //    image.setAttribute(\"data-src-large\",`img/${restaurant.id}_800.jpg`);\r\n    image.setAttribute(\"alt\", restaurant.name + \" Restaurant Main Image\");\r\n\r\n    const cuisine = document.getElementById('restaurant-cuisine');\r\n    cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n    // fill operating hours\r\n    if (restaurant.operating_hours) {\r\n        fillRestaurantHoursHTML();\r\n    }\r\n    // fill reviews\r\n    fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n    const hours = document.getElementById('restaurant-hours');\r\n    for (let key in operatingHours) {\r\n        const row = document.createElement('tr');\r\n\r\n        const day = document.createElement('th');\r\n        day.setAttribute(\"role\", \"rowheader\");\r\n        day.innerHTML = key;\r\n        row.appendChild(day);\r\n\r\n        const time = document.createElement('td');\r\n        time.innerHTML = operatingHours[key];\r\n        row.appendChild(time);\r\n\r\n        hours.appendChild(row);\r\n    }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n    const container = document.getElementById('reviews-container');\r\n    const title = document.createElement('h2');\r\n    title.innerHTML = 'Reviews';\r\n    container.appendChild(title);\r\n\r\n    if (!reviews) {\r\n        const noReviews = document.createElement('p');\r\n        noReviews.innerHTML = 'No reviews yet!';\r\n        container.appendChild(noReviews);\r\n        return;\r\n    }\r\n    const ul = document.getElementById('reviews-list');\r\n    reviews.forEach(review => {\r\n        ul.appendChild(createReviewHTML(review));\r\n    });\r\n\r\n    container.appendChild(ul);\r\n    //init lazy loading\r\n    setTimeout(function () {\r\n        bLazy.revalidate();\r\n    },10);\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\nconst createReviewHTML = (review) => {\r\n    const li = document.createElement('li');\r\n    li.setAttribute(\"role\", \"listitem\")\r\n\r\n    const name = document.createElement('h3');\r\n    name.innerHTML = review.name;\r\n    li.appendChild(name);\r\n\r\n    const date = document.createElement('date');\r\n    date.innerHTML = review.date;\r\n    date.setAttribute(\"datetime\", review.date)\r\n    li.appendChild(date);\r\n\r\n    const rating = document.createElement('p');\r\n    rating.setAttribute(\"title\", \"1 to 5 rating\");\r\n    rating.innerHTML = `Rating: ${review.rating}`;\r\n    li.appendChild(rating);\r\n\r\n    const comments = document.createElement('p');\r\n    comments.innerHTML = review.comments;\r\n    li.appendChild(comments);\r\n\r\n    return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\r\n    const breadcrumb = document.getElementById('breadcrumb');\r\n    const li = document.createElement('li');\r\n    li.innerHTML = restaurant.name;\r\n    li.setAttribute(\"aria-current\", \"page\");\r\n    breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nconst getParameterByName = (name, url) => {\r\n    if (!url)\r\n        url = window.location.href;\r\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n        results = regex.exec(url);\r\n    if (!results)\r\n        return null;\r\n    if (!results[2])\r\n        return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n\r\n\r\nconst bLazy = new Blazy({\r\n    // Options\r\n});\r\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n\r\n    static openDatabase() {\r\n        // If the browser doesn't support service worker,\r\n        // we don't care about having a database\r\n        if (!navigator.serviceWorker) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return idb.open('koshary', 1, function (upgradeDb) {\r\n            var store = upgradeDb.createObjectStore('restaurants', {\r\n                keyPath: 'id'\r\n            });\r\n            store.createIndex('id', 'id');\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        //const port = location.port ? location.port : 8000 // Change this to your server port\r\n        const port = 3005; //change according to gulpfile config\r\n        const host = location.hostname ? location.hostname : 'localhost'\r\n        return `http://${host}:${port}/restaurants`;\r\n    }\r\n\r\n    /**\r\n     * Fetch all restaurants.\r\n     */\r\n    static fetchRestaurants(callback) {\r\n        fetch(DBHelper.DATABASE_URL).then((response) => {\r\n            return response.json();\r\n        }).then((json) => {\r\n\r\n            //add restuarants object array into a variable\r\n            const restaurants = json;\r\n            //open indexdb to cach all restaurants data\r\n            DBHelper.openDatabase().then( (db) => {\r\n                if (!db) return;\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n                restaurants.forEach(function (restaurant) {\r\n                    store.put(restaurant);\r\n                });\r\n            });\r\n            callback(null, restaurants);\r\n\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\n            DBHelper.openDatabase().then( (db) => {\r\n                if (!db) return;\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n                let idIndex = store.index(\"id\");\r\n                return idIndex.getAll();\r\n            }).then((json)=>{\r\n                const restaurants = json;\r\n                callback(null, restaurants);\n            });\r\n\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static fetchRestaurantById(id, callback) {\r\n        // fetch all restaurants with proper error handling.\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                const restaurant = restaurants.find(r => r.id == id);\r\n                if (restaurant) { // Got the restaurant\r\n                    callback(null, restaurant);\r\n                } else { // Restaurant does not exist in the database\r\n                    callback('Restaurant does not exist', null);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisine(cuisine, callback) {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given cuisine type\r\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given neighborhood\r\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                let results = restaurants\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\r\n    static fetchNeighborhoods(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n                callback(null, uniqueNeighborhoods);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\r\n    static fetchCuisines(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n                callback(null, uniqueCuisines);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        return (`/img/${restaurant.photograph}`);\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}\r\n"]}