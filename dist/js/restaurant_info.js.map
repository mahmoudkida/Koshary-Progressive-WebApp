{"version":3,"sources":["swhelper.js","dbhelper.js","restaurant_info.js"],"names":["IndexController","_registerServiceWorker","prototype","navigator","serviceWorker","indexController","register","then","reg","controller","waiting","_updateReady","installing","_trackInstalling","addEventListener","refreshing","window","location","reload","worker","state","toast","confirm","postMessage","action","swController","DBHelper","Promise","resolve","idb","open","upgradeDb","store","createObjectStore","keyPath","createIndex","callback","fetch","DATABASE_URL","response","json","restaurants","openDatabase","db","tx","transaction","objectStore","forEach","restaurant","put","catch","ex","error","idIndex","index","getAll","id","fetchRestaurants","find","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","marker","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","port","host","document","event","fetchRestaurantFromURL","console","fillBreadcrumb","initMap","self","Map","getElementById","zoom","center","scrollwheel","classList","add","mapMarkerForRestaurant","initStaticMap","lat","lng","imageConrtainer","size","offsetWidth","offsetHeight","staticMapURL","querySelector","setAttribute","getParameterByName","fetchRestaurantById","fillRestaurantHTML","setTimeout","bLazy","revalidate","innerHTML","address","image","className","src","imageUrlForRestaurant","operating_hours","fillRestaurantHoursHTML","fillReviewsHTML","operatingHours","hours","key","row","createElement","day","appendChild","time","reviews","container","noReviews","ul","createReviewHTML","review","li","date","rating","comments","breadcrumb","href","replace","regex","RegExp","exec","decodeURIComponent","Blazy"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["\r\n\r\nfunction IndexController() {\r\n  this._registerServiceWorker();\r\n}\r\n\r\nIndexController.prototype._registerServiceWorker = function() {\r\n  if (!navigator.serviceWorker) return;\r\n\r\n  var indexController = this;\r\n\r\n  navigator.serviceWorker.register('sw.js').then(function(reg) {\r\n    if (!navigator.serviceWorker.controller) {\r\n      return;\r\n    }\r\n\r\n    if (reg.waiting) {\r\n      indexController._updateReady(reg.waiting);\r\n      return;\r\n    }\r\n\r\n    if (reg.installing) {\r\n      indexController._trackInstalling(reg.installing);\r\n      return;\r\n    }\r\n\r\n    reg.addEventListener('updatefound', function() {\r\n      indexController._trackInstalling(reg.installing);\r\n    });\r\n  });\r\n\r\n  // Ensure refresh is only called once.\r\n  // This works around a bug in \"force update on reload\".\r\n  var refreshing;\r\n  navigator.serviceWorker.addEventListener('controllerchange', function() {\r\n    if (refreshing) return;\r\n    window.location.reload();\r\n    refreshing = true;\r\n  });\r\n};\r\n\r\nIndexController.prototype._trackInstalling = function(worker) {\r\n  var indexController = this;\r\n  worker.addEventListener('statechange', function() {\r\n    if (worker.state == 'installed') {\r\n      indexController._updateReady(worker);\r\n    }\r\n  });\r\n};\r\n\r\nIndexController.prototype._updateReady = function(worker) {\r\n\r\n    var toast = confirm(\"New version available, do you want to upate ?\");\n\r\nif (toast != null) {\r\n    worker.postMessage({action: 'skipWaiting'});\r\n}\r\n\r\n};\r\n\r\n//initialize sw\r\nconst swController = new IndexController();\r\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n\r\n    static openDatabase() {\r\n        // If the browser doesn't support service worker,\r\n        // we don't care about having a database\r\n        if (!navigator.serviceWorker) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return idb.open('koshary', 1, function (upgradeDb) {\r\n            var store = upgradeDb.createObjectStore('restaurants', {\r\n                keyPath: 'id'\r\n            });\r\n            store.createIndex('id', 'id');\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        //const port = location.port ? location.port : 8000 // Change this to your server port\r\n        const port = 1337; //change according to gulpfile config\r\n        //const host = location.hostname ? location.hostname : 'localhost';\r\n        const host = 'localhost';\r\n        return `http://${host}:${port}/restaurants`;\r\n    }\r\n\r\n    /**\r\n     * Fetch all restaurants.\r\n     */\r\n    static fetchRestaurants(callback) {\r\n        fetch(DBHelper.DATABASE_URL).then((response) => {\r\n            return response.json();\r\n        }).then((json) => {\r\n\r\n            //add restuarants object array into a variable\r\n            const restaurants = json;\r\n            //open indexdb to cach all restaurants data\r\n            DBHelper.openDatabase().then( (db) => {\r\n                if (!db) return;\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n                restaurants.forEach(function (restaurant) {\r\n                    store.put(restaurant);\r\n                });\r\n            });\r\n            callback(null, restaurants);\r\n\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            DBHelper.openDatabase().then( (db) => {\r\n                if (!db) return;\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n                let idIndex = store.index(\"id\");\r\n                return idIndex.getAll();\r\n            }).then((json)=>{\r\n                const restaurants = json;\r\n                callback(null, restaurants);\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static fetchRestaurantById(id, callback) {\r\n        // fetch all restaurants with proper error handling.\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                const restaurant = restaurants.find(r => r.id == id);\r\n                if (restaurant) { // Got the restaurant\r\n                    callback(null, restaurant);\r\n                } else { // Restaurant does not exist in the database\r\n                    callback('Restaurant does not exist', null);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisine(cuisine, callback) {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given cuisine type\r\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given neighborhood\r\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                let results = restaurants\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\r\n    static fetchNeighborhoods(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n                callback(null, uniqueNeighborhoods);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\r\n    static fetchCuisines(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n                callback(null, uniqueCuisines);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        return (`/img/${restaurant.photograph}`);\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}\r\n","let restaurant, map;\r\n\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n\r\n    fetchRestaurantFromURL((error, restaurant) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            fillBreadcrumb();\r\n        }\r\n    });\r\n});\r\n\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\n\r\nconst initMap = () => {\r\n    if (!self.map) {\r\n        self.map = new google.maps.Map(document.getElementById('map'), {\r\n            zoom: 16,\r\n            center: restaurant.latlng,\r\n            scrollwheel: false\r\n        });\r\n    }\r\n    document.getElementById(\"map-container\").classList.add(\"show-interactive-map\");\r\n\r\n    DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n}\r\n\r\nconst initStaticMap = () => {\r\n    let latlng = `${restaurant.latlng.lat},${restaurant.latlng.lng}`,\r\n        zoom = 12,\r\n        imageConrtainer = document.getElementById(\"map-container\");\r\n    let size = imageConrtainer.offsetWidth + \"x\" + imageConrtainer.offsetHeight;\r\n    let staticMapURL = `https://maps.googleapis.com/maps/api/staticmap?center=${latlng}&zoom=${zoom}&size=${size}&key=AIzaSyD7zwXocDxCO_YLSyVhDNYZDmhMxr0RcNU`;\r\n    staticMapURL += `&markers=${restaurant.latlng.lat},${restaurant.latlng.lng}`;\r\n    document.querySelector(\".static-map\").setAttribute(\"src\", staticMapURL);\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nconst fetchRestaurantFromURL = (callback) => {\r\n    if (self.restaurant) { // restaurant already fetched!\r\n        callback(null, self.restaurant)\r\n        return;\r\n    }\r\n    const id = getParameterByName('id');\r\n    if (!id) { // no id found in URL\r\n        let error = 'No restaurant id in URL'\r\n        callback(error, null);\r\n    } else {\r\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n            self.restaurant = restaurant;\r\n            if (!restaurant) {\r\n                console.error(error);\r\n                return;\r\n            }\r\n            fillRestaurantHTML();\r\n            initStaticMap();\r\n            callback(null, restaurant);\r\n            //init lazy loading\r\n            setTimeout(function () {\r\n                bLazy.revalidate();\r\n            }, 10);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n    const name = document.getElementById('restaurant-name');\r\n    name.innerHTML = restaurant.name;\r\n\r\n    const address = document.getElementById('restaurant-address');\r\n    address.innerHTML = restaurant.address;\r\n\r\n    const image = document.getElementById('restaurant-img');\r\n    image.className = 'restaurant-img b-lazy';\r\n    //image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.src = \"/img/placeholder-image.png\";\r\n    image.setAttribute(\"data-src\", `${DBHelper.imageUrlForRestaurant(restaurant)}`);\r\n    image.setAttribute(\"data-srcset\", `/img/${restaurant.id}_300.jpg 300w,/img/${restaurant.id}.jpg 586w,/img/${restaurant.id}_800.jpg 800w`);\r\n\r\n    //    image.setAttribute(\"data-src-small\",`img/${restaurant.id}_300.jpg`);\r\n    //    image.setAttribute(\"data-src-medium\",`img/${restaurant.id}_580.jpg`);\r\n    //    image.setAttribute(\"data-src-large\",`img/${restaurant.id}_800.jpg`);\r\n    image.setAttribute(\"alt\", `${restaurant.name}Restaurant Main Image, `);\r\n\r\n    const cuisine = document.getElementById('restaurant-cuisine');\r\n    cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n    // fill operating hours\r\n    if (restaurant.operating_hours) {\r\n        fillRestaurantHoursHTML();\r\n    }\r\n    // fill reviews\r\n    fillReviewsHTML();\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n    const hours = document.getElementById('restaurant-hours');\r\n    for (let key in operatingHours) {\r\n        const row = document.createElement('tr');\r\n\r\n        const day = document.createElement('th');\r\n        day.setAttribute(\"role\", \"rowheader\");\r\n        day.innerHTML = key;\r\n        row.appendChild(day);\r\n\r\n        const time = document.createElement('td');\r\n        time.innerHTML = operatingHours[key];\r\n        row.appendChild(time);\r\n\r\n        hours.appendChild(row);\r\n    }\r\n}\r\n\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n    const container = document.getElementById('reviews-container');\r\n    const title = document.createElement('h3');\r\n    title.innerHTML = 'Reviews';\r\n    container.appendChild(title);\r\n\r\n    if (!reviews) {\r\n        const noReviews = document.createElement('p');\r\n        noReviews.innerHTML = 'No reviews yet!';\r\n        container.appendChild(noReviews);\r\n        return;\r\n    }\r\n    const ul = document.getElementById('reviews-list');\r\n    reviews.forEach(review => {\r\n        ul.appendChild(createReviewHTML(review));\r\n    });\r\n\r\n    container.appendChild(ul);\r\n\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\nconst createReviewHTML = (review) => {\r\n    const li = document.createElement('li');\r\n    li.setAttribute(\"role\", \"listitem\")\r\n\r\n    const name = document.createElement('h3');\r\n    name.innerHTML = review.name;\r\n    li.appendChild(name);\r\n\r\n    const date = document.createElement('date');\r\n    date.innerHTML = review.date;\r\n    date.setAttribute(\"datetime\", review.date)\r\n    li.appendChild(date);\r\n\r\n    const rating = document.createElement('p');\r\n    rating.setAttribute(\"title\", \"1 to 5 rating\");\r\n    rating.innerHTML = `Rating: ${review.rating}`;\r\n    li.appendChild(rating);\r\n\r\n    const comments = document.createElement('p');\r\n    comments.innerHTML = review.comments;\r\n    li.appendChild(comments);\r\n\r\n    return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\r\n    const breadcrumb = document.getElementById('breadcrumb');\r\n    const li = document.createElement('li');\r\n    li.innerHTML = restaurant.name;\r\n    li.setAttribute(\"aria-current\", \"page\");\r\n    breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nconst getParameterByName = (name, url) => {\r\n    if (!url)\r\n        url = window.location.href;\r\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n        results = regex.exec(url);\r\n    if (!results)\r\n        return null;\r\n    if (!results[2])\r\n        return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n\r\n\r\nconst bLazy = new Blazy({\r\n    // Options\r\n});\r\n"]}