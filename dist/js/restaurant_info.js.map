{"version":3,"sources":["swhelper.js","dbhelper.js","restaurant_info.js"],"names":["IndexController","_registerServiceWorker","prototype","navigator","serviceWorker","indexController","register","then","reg","controller","waiting","_updateReady","installing","_trackInstalling","addEventListener","refreshing","window","location","reload","worker","state","toast","confirm","postMessage","action","swController","DBHelper","Promise","resolve","idb","open","upgradeDb","store","createObjectStore","keyPath","createIndex","callback","fetch","DATABASE_URL","response","json","restaurants","openDatabase","db","tx","transaction","objectStore","forEach","restaurant","put","catch","ex","error","idIndex","index","getAll","id","get","fetchRestaurantById","is_favorite","method","complete","cuisine","fetchRestaurants","results","filter","r","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","restaurantId","reviews","restraintReviewArray","review","body","photograph","marker","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","port","host","document","event","fetchRestaurantFromURL","console","fillBreadcrumb","initMap","self","Map","getElementById","zoom","center","scrollwheel","classList","add","mapMarkerForRestaurant","initStaticMap","lat","lng","imageConrtainer","size","offsetWidth","offsetHeight","staticMapURL","querySelector","setAttribute","getParameterByName","fillRestaurantHTML","setTimeout","bLazy","revalidate","innerHTML","addTofavoriteButton","createElement","dataset","append","address","image","className","src","imageUrlForRestaurant","operating_hours","fillRestaurantHoursHTML","fetchRestaurantReview","alert","fillReviewsHTML","operatingHours","hours","key","row","day","appendChild","time","addRestaurantToFavorite","btn","toggleRestaurantFavorite","remove","submitRetaurantReview","evt","reviewForm","getElementsByName","reviewBody","elements","value","restaurant_id","rating","comments","date","Date","postRestaurantReview","push","reset","container","noReviews","ul","createReviewHTML","li","createdAt","timeConverter","breadcrumb","href","replace","regex","RegExp","exec","decodeURIComponent","UNIX_timestamp","a","months","year","getYear","month","getMonth","getDate","hour","getHours","min","getMinutes","sec","getSeconds","Blazy"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["\r\n\r\nfunction IndexController() {\r\n  this._registerServiceWorker();\r\n}\r\n\r\nIndexController.prototype._registerServiceWorker = function() {\r\n  if (!navigator.serviceWorker) return;\r\n\r\n  var indexController = this;\r\n\r\n  navigator.serviceWorker.register('sw.js').then(function(reg) {\r\n    if (!navigator.serviceWorker.controller) {\r\n      return;\r\n    }\r\n\r\n    if (reg.waiting) {\r\n      indexController._updateReady(reg.waiting);\r\n      return;\r\n    }\r\n\r\n    if (reg.installing) {\r\n      indexController._trackInstalling(reg.installing);\r\n      return;\r\n    }\r\n\r\n    reg.addEventListener('updatefound', function() {\r\n      indexController._trackInstalling(reg.installing);\r\n    });\r\n  });\r\n\r\n  // Ensure refresh is only called once.\r\n  // This works around a bug in \"force update on reload\".\r\n  var refreshing;\r\n  navigator.serviceWorker.addEventListener('controllerchange', function() {\r\n    if (refreshing) return;\r\n    window.location.reload();\r\n    refreshing = true;\r\n  });\r\n};\r\n\r\nIndexController.prototype._trackInstalling = function(worker) {\r\n  var indexController = this;\r\n  worker.addEventListener('statechange', function() {\r\n    if (worker.state == 'installed') {\r\n      indexController._updateReady(worker);\r\n    }\r\n  });\r\n};\r\n\r\nIndexController.prototype._updateReady = function(worker) {\r\n\r\n    var toast = confirm(\"New version available, do you want to upate ?\");\n\r\nif (toast != null) {\r\n    worker.postMessage({action: 'skipWaiting'});\r\n}\r\n\r\n};\r\n\r\n//initialize sw\r\nconst swController = new IndexController();\r\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n\r\n    static openDatabase() {\r\n        // If the browser doesn't support service worker,\r\n        // we don't care about having a database\r\n        if (!navigator.serviceWorker) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return idb.open('koshary', 1, function (upgradeDb) {\r\n            var store = upgradeDb.createObjectStore('restaurants', {\r\n                keyPath: 'id'\r\n            });\r\n            store.createIndex('id', 'id');\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        //const port = location.port ? location.port : 8000 // Change this to your server port\r\n        const port = 1337; //change according to gulpfile config\r\n        //const host = location.hostname ? location.hostname : 'localhost';\r\n        const host = 'localhost';\r\n        return `http://${host}:${port}`;\r\n    }\r\n\r\n    /**\r\n     * Fetch all restaurants.\r\n     */\r\n    static fetchRestaurants(callback) {\r\n        fetch(DBHelper.DATABASE_URL + '/restaurants').then((response) => {\r\n            return response.json();\r\n        }).then((json) => {\r\n\r\n            //add restuarants object array into a variable\r\n            const restaurants = json;\r\n            //open indexdb to cach all restaurants data\r\n            DBHelper.openDatabase().then((db) => {\r\n                if (!db) return;\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n                restaurants.forEach(function (restaurant) {\r\n                    store.put(restaurant);\r\n                });\r\n            });\r\n            callback(null, restaurants);\r\n\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            DBHelper.openDatabase().then((db) => {\r\n                if (!db) return;\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n                let idIndex = store.index(\"id\");\r\n                return idIndex.getAll();\r\n            }).then((json) => {\r\n                const restaurants = json;\r\n                callback(null, restaurants);\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static fetchRestaurantById(id, callback) {\r\n        fetch(DBHelper.DATABASE_URL + '/restaurants/' + id).then((response) => {\r\n            return response.json();\r\n        }).then((json) => {\r\n\r\n            //add restuarants object array into a variable\r\n            const restaurant = json;\r\n            callback(null, restaurant);\r\n\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            DBHelper.openDatabase().then((db) => {\r\n                if (!db) return;\r\n                let tx = db.transaction('restaurants', 'readwrite');\r\n                let store = tx.objectStore('restaurants');\r\n                let idIndex = store.index(\"id\");\r\n                return idIndex.get(id);\r\n            }).then((json) => {\r\n                const restaurant = json;\r\n                callback(null, restaurant);\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static toggleRestaurantFavorite(id, callback) {\r\n        DBHelper.fetchRestaurantById(id, function (error, restaurant) {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                //send to option the opposite of what is currently set\r\n                fetch(DBHelper.DATABASE_URL + '/restaurants/' + id + '/?is_favorite=' +\r\n                    (restaurant.is_favorite == \"false\"  ? \"true\" : \"false\"), {\r\n                        method: 'POST'\r\n                    }).then((response) => {\r\n                    return response.json();\r\n                }).then((response) => {\r\n                    DBHelper.openDatabase().then((db) => {\r\n                        if (!db) return;\r\n                        let tx = db.transaction('restaurants', 'readwrite');\r\n                        let store = tx.objectStore('restaurants');\r\n                        store.put(response);\r\n                         return tx.complete;\r\n                    });\r\n                    callback(null, response);\r\n                });\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisine(cuisine, callback) {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given cuisine type\r\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given neighborhood\r\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                let results = restaurants\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\r\n    static fetchNeighborhoods(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n                callback(null, uniqueNeighborhoods);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\r\n    static fetchCuisines(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n                callback(null, uniqueCuisines);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * get a review on a restaurant\r\n     */\r\n    static fetchRestaurantReview (restaurantId,callback){\r\n        fetch(DBHelper.DATABASE_URL + '/reviews').then((response) =>{\r\n            return response.json();\r\n        }).then((reviews) =>{\r\n            const restraintReviewArray = reviews.filter((review, i) => review[\"restaurant_id\"] == restaurantId)\r\n\r\n            callback(null,restraintReviewArray);\r\n        }).catch((error) =>{\r\n            callback(error,null)\r\n        });\r\n    }\r\n    \r\n    /**\r\n     * post a review on a restaurant\r\n     */\r\n    static postRestaurantReview (review,callback){\r\n        fetch(DBHelper.DATABASE_URL + '/reviews',{\r\n            method : \"POST\",\r\n            body : review,\r\n        }).then((response) => {\r\n            response.json();\r\n        }).then((json) =>{\r\n            callback(null,json);\r\n        })\r\n    }\r\n    \r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        return (`/img/${restaurant.photograph}`);\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}\r\n","let restaurant, map;\r\n\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n\r\n    fetchRestaurantFromURL((error, restaurant) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            fillBreadcrumb();\r\n        }\r\n    });\r\n});\r\n\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\n\r\nconst initMap = () => {\r\n    if (!self.map) {\r\n        self.map = new google.maps.Map(document.getElementById('map'), {\r\n            zoom: 16,\r\n            center: restaurant.latlng,\r\n            scrollwheel: false\r\n        });\r\n    }\r\n    document.getElementById(\"map-container\").classList.add(\"show-interactive-map\");\r\n\r\n    DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n}\r\n\r\nconst initStaticMap = () => {\r\n    let latlng = `${restaurant.latlng.lat},${restaurant.latlng.lng}`,\r\n        zoom = 12,\r\n        imageConrtainer = document.getElementById(\"map-container\");\r\n    let size = imageConrtainer.offsetWidth + \"x\" + imageConrtainer.offsetHeight;\r\n    let staticMapURL = `https://maps.googleapis.com/maps/api/staticmap?center=${latlng}&zoom=${zoom}&size=${size}&key=AIzaSyD7zwXocDxCO_YLSyVhDNYZDmhMxr0RcNU`;\r\n    staticMapURL += `&markers=${restaurant.latlng.lat},${restaurant.latlng.lng}`;\r\n    document.querySelector(\".static-map\").setAttribute(\"src\", staticMapURL);\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nconst fetchRestaurantFromURL = (callback) => {\r\n    if (self.restaurant) { // restaurant already fetched!\r\n        callback(null, self.restaurant)\r\n        return;\r\n    }\r\n    const id = getParameterByName('id');\r\n    if (!id) { // no id found in URL\r\n        let error = 'No restaurant id in URL'\r\n        callback(error, null);\r\n    } else {\r\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n            self.restaurant = restaurant;\r\n            if (!restaurant) {\r\n                console.error(error);\r\n                return;\r\n            }\r\n            fillRestaurantHTML();\r\n            initStaticMap();\r\n            callback(null, restaurant);\r\n            //init lazy loading\r\n            setTimeout(function () {\r\n                bLazy.revalidate();\r\n            }, 10);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n    const name = document.getElementById('restaurant-name');\r\n    name.innerHTML = restaurant.name;\r\n\r\n    //create favorite button\r\n    const addTofavoriteButton = document.createElement(\"button\");\r\n    addTofavoriteButton.classList.add(\"add-tofavorite\");\r\n    if (restaurant.is_favorite == \"true\" || restaurant.is_favorite == true) {\r\n        addTofavoriteButton.classList.add(\"favorite\");\r\n        addTofavoriteButton.innerHTML = '<span>★</span> Favorited';\r\n        addTofavoriteButton.title = \"Click to remove from favorite\";\r\n    } else {\r\n        addTofavoriteButton.innerHTML = '<span>☆</span> Add To Favorite';\r\n    }\r\n    addTofavoriteButton.setAttribute(\"role\", \"button\");\r\n    addTofavoriteButton.setAttribute(\"onclick\", \"addRestaurantToFavorite(this)\");\r\n    addTofavoriteButton.dataset.restaurantId = restaurant.id;\r\n    name.append(addTofavoriteButton);\r\n\r\n\r\n\r\n    const address = document.getElementById('restaurant-address');\r\n    address.innerHTML = restaurant.address;\r\n\r\n    const image = document.getElementById('restaurant-img');\r\n    image.className = 'restaurant-img b-lazy';\r\n    //image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.src = \"/img/placeholder-image.png\";\r\n    image.setAttribute(\"data-src\", `${DBHelper.imageUrlForRestaurant(restaurant)}`);\r\n    image.setAttribute(\"data-srcset\", `/img/${restaurant.id}_300.jpg 300w,/img/${restaurant.id}.jpg 586w,/img/${restaurant.id}_800.jpg 800w`);\r\n\r\n    //    image.setAttribute(\"data-src-small\",`img/${restaurant.id}_300.jpg`);\r\n    //    image.setAttribute(\"data-src-medium\",`img/${restaurant.id}_580.jpg`);\r\n    //    image.setAttribute(\"data-src-large\",`img/${restaurant.id}_800.jpg`);\r\n    image.setAttribute(\"alt\", `${restaurant.name}Restaurant Main Image, `);\r\n\r\n    const cuisine = document.getElementById('restaurant-cuisine');\r\n    cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n    // fill operating hours\r\n    if (restaurant.operating_hours) {\r\n        fillRestaurantHoursHTML();\r\n    }\r\n    // fill reviews\r\n    DBHelper.fetchRestaurantReview(restaurant.id, (error, reviews) => {\r\n        if (error) return alert(error);\r\n        self.restaurant.reviews = reviews;\r\n        fillReviewsHTML();\r\n    })\r\n\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n    const hours = document.getElementById('restaurant-hours');\r\n    for (let key in operatingHours) {\r\n        const row = document.createElement('tr');\r\n\r\n        const day = document.createElement('th');\r\n        day.setAttribute(\"role\", \"rowheader\");\r\n        day.innerHTML = key;\r\n        row.appendChild(day);\r\n\r\n        const time = document.createElement('td');\r\n        time.innerHTML = operatingHours[key];\r\n        row.appendChild(time);\r\n\r\n        hours.appendChild(row);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Add - Remove retaurant to favorite.\r\n */\r\nconst addRestaurantToFavorite = (btn) => {\r\n    DBHelper.toggleRestaurantFavorite(btn.dataset['restaurantId'], function (error, response) {\r\n        if (error) alert(error);\r\n        if (response.is_favorite == \"false\") {\r\n            btn.classList.remove(\"favorite\");\r\n            btn.innerHTML = '<span>☆</span> Add To Favorite';\r\n        } else {\r\n            btn.innerHTML = '<span>★</span> Favorited';\r\n            btn.title = \"Click to remove from favorite\";\r\n            btn.classList.add(\"favorite\");\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Add review to a restaurant\r\n */\r\nconst submitRetaurantReview = (evt, restaurant = self.restaurant) => {\r\n    //reset the error container\r\n    document.getElementById(\"form-error-list\").innerHTML = \"\";\r\n    let reviewForm = document.getElementsByName(\"restaurant-review-form\")[0],\r\n        reviewBody = {};\r\n    //check if there is any missing text\r\n    if (reviewForm.elements[\"user_name\"].value == \"\") {\r\n        document.getElementById(\"form-error-list\").append(document.createElement(\"li\").innerHTML(\"Please fill your name\"))\r\n        return false;\r\n    }\r\n    if (reviewForm.elements[\"rating\"].value == \"\") {\r\n        document.getElementById(\"form-error-list\").append(document.createElement(\"li\").innerHTML(\"Please fill the rating\"))\r\n        return false;\r\n    }\r\n    if (reviewForm.elements[\"comments\"].value == \"\") {\r\n        document.getElementById(\"form-error-list\").append(document.createElement(\"li\").innerHTML(\"Please fill your comment\"))\r\n        return false;\r\n    }\r\n    reviewBody = {\r\n        restaurant_id: restaurant.id,\r\n        name: reviewForm.elements[\"user_name\"].value,\r\n        rating: reviewForm.elements[\"rating\"].value,\r\n        comments: reviewForm.elements[\"comments\"].value,\r\n        date: new Date()\r\n    };\r\n\r\n    DBHelper.postRestaurantReview(reviewBody, function (error, response) {\r\n        if (error) return alert(error);\r\n        if (!self.restaurant.reviews) {\r\n            self.restaurant.reviews = [];\r\n        }\r\n        self.restaurant.reviews.push(reviewBody);\r\n        fillReviewsHTML();\r\n        reviewForm.reset();\r\n    })\r\n    return true;\r\n}\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n    const container = document.getElementById('reviews-container');\r\n    container.innerHTML = '';\r\n    const title = document.createElement('h3');\r\n    title.innerHTML = 'Reviews';\r\n    container.appendChild(title);\r\n\r\n    if (!reviews) {\r\n        const noReviews = document.createElement('p');\r\n        noReviews.innerHTML = 'No reviews yet!';\r\n        container.appendChild(noReviews);\r\n        return;\r\n    }\r\n    const ul = document.createElement('ul');\r\n    ul.setAttribute(\"id\", \"reviews-list\");\r\n    ul.setAttribute(\"role\", \"list\");\r\n    reviews.forEach(review => {\r\n        ul.appendChild(createReviewHTML(review));\r\n    });\r\n\r\n    container.appendChild(ul);\r\n\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\nconst createReviewHTML = (review) => {\r\n    const li = document.createElement('li');\r\n    li.setAttribute(\"role\", \"listitem\")\r\n\r\n    const name = document.createElement('h3');\r\n    name.innerHTML = review.name;\r\n    li.appendChild(name);\r\n\r\n    if (review.createdAt) {\r\n        const date = document.createElement('date');\r\n        date.innerHTML = timeConverter(review.createdAt);\r\n        date.setAttribute(\"datetime\", review.date)\r\n        li.appendChild(date);\r\n    }\r\n\r\n\r\n    const rating = document.createElement('p');\r\n    rating.setAttribute(\"title\", \"1 to 5 rating\");\r\n    rating.innerHTML = `Rating: ${review.rating}`;\r\n    li.appendChild(rating);\r\n\r\n    const comments = document.createElement('p');\r\n    comments.innerHTML = review.comments;\r\n    li.appendChild(comments);\r\n\r\n    return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\r\n    const breadcrumb = document.getElementById('breadcrumb');\r\n    const li = document.createElement('li');\r\n    li.innerHTML = restaurant.name;\r\n    li.setAttribute(\"aria-current\", \"page\");\r\n    breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nconst getParameterByName = (name, url) => {\r\n    if (!url)\r\n        url = window.location.href;\r\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n        results = regex.exec(url);\r\n    if (!results)\r\n        return null;\r\n    if (!results[2])\r\n        return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n\r\n\r\n\r\nconst timeConverter = (UNIX_timestamp) => {\r\n    var a = new Date(UNIX_timestamp * 1000);\r\n    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    var year = a.getYear();\r\n    var month = months[a.getMonth()];\r\n    var date = a.getDate();\r\n    var hour = a.getHours();\r\n    var min = a.getMinutes();\r\n    var sec = a.getSeconds();\r\n    var time = date + ' ' + month + ' ' + hour + ':' + min + ':' + sec;\r\n    return time;\r\n}\r\nconst bLazy = new Blazy({\r\n    // Options\r\n});\r\n"]}