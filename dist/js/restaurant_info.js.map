{"version":3,"sources":["swhelper.js","indexdbhelper.js","dbhelper.js","restaurant_info.js"],"names":["IndexController","_registerServiceWorker","prototype","navigator","serviceWorker","indexController","register","then","reg","controller","waiting","_updateReady","installing","_trackInstalling","addEventListener","refreshing","window","location","reload","console","log","event","data","msg","url","worker","state","toast","confirm","postMessage","action","swController","IndexDBHelper","Promise","resolve","idb","open","upgradeDb","oldVersion","restaurantStore","createObjectStore","keyPath","createIndex","reviewStore","offlineReview","autoIncrement","offlineRestaurantFavorite","restaurants","callback","openDatabase","db","tx","transaction","store","objectStore","forEach","restaurant","put","complete","idIndex","index","getAll","json","id","find","i","reviews","review","restraintReviewArray","filter","restaurantId","DBHelper","fetch","DATABASE_URL","response","storeRestaurants","catch","ex","error","fetchRestaurants","fetchRestaurantById","is_favorite","method","toggleRestaurantFavorite","postFavoriteOffline","cuisine","results","r","cuisine_type","neighborhood","neighborhoods","map","v","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","storeReviews","fetchReviews","body","addedReview","Object","assign","postReview","postReviewOffline","photograph","marker","google","maps","Marker","position","latlng","title","name","urlForRestaurant","animation","Animation","DROP","port","host","document","fetchRestaurantFromURL","fillBreadcrumb","initMap","self","Map","getElementById","zoom","center","scrollwheel","classList","add","mapMarkerForRestaurant","initStaticMap","lat","lng","imageConrtainer","size","offsetWidth","offsetHeight","staticMapURL","querySelector","setAttribute","getParameterByName","fillRestaurantHTML","setTimeout","bLazy","revalidate","innerHTML","addTofavoriteButton","createElement","dataset","append","address","image","className","src","imageUrlForRestaurant","operating_hours","fillRestaurantHoursHTML","fetchRestaurantReview","alert","fillReviewsHTML","operatingHours","hours","key","row","day","appendChild","time","addRestaurantToFavorite","btn","remove","submitRetaurantReview","evt","reviewForm","getElementsByName","reviewBody","elements","value","restaurant_id","rating","comments","date","Date","postRestaurantReview","unshift","reset","container","noReviews","ul","createReviewHTML","li","createdAt","timeConverter","breadcrumb","href","replace","regex","RegExp","exec","decodeURIComponent","UNIX_timestamp","a","months","year","getYear","month","getMonth","getDate","hour","getHours","min","getMinutes","sec","getSeconds","Blazy"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["function IndexController() {\r\n    this._registerServiceWorker();\r\n}\r\n\r\nIndexController.prototype._registerServiceWorker = function () {\r\n    if (!navigator.serviceWorker) return;\r\n\r\n    var indexController = this;\r\n\r\n    navigator.serviceWorker.register('sw.js').then(function (reg) {\r\n        if (!navigator.serviceWorker.controller) {\r\n            return;\r\n        }\r\n\r\n        if (reg.waiting) {\r\n            indexController._updateReady(reg.waiting);\r\n            return;\r\n        }\r\n\r\n        if (reg.installing) {\r\n            indexController._trackInstalling(reg.installing);\r\n            return;\r\n        }\r\n\r\n        reg.addEventListener('updatefound', function () {\r\n            indexController._trackInstalling(reg.installing);\r\n        });\r\n    });\r\n\r\n    // Ensure refresh is only called once.\r\n    // This works around a bug in \"force update on reload\".\r\n    var refreshing;\r\n    navigator.serviceWorker.addEventListener('controllerchange', function () {\r\n        if (refreshing) return;\r\n        window.location.reload();\r\n        refreshing = true;\r\n    });\r\n    navigator.serviceWorker.addEventListener('message', event => {\r\n        console.log(event.data.msg, event.data.url);\r\n    });\r\n};\r\n\r\nIndexController.prototype._trackInstalling = function (worker) {\r\n    var indexController = this;\r\n    worker.addEventListener('statechange', function () {\r\n        if (worker.state == 'installed') {\r\n            indexController._updateReady(worker);\r\n        }\r\n    });\r\n};\r\n\r\nIndexController.prototype._updateReady = function (worker) {\r\n\r\n    var toast = confirm(\"New version available, do you want to upate ?\");\r\n\r\n    if (toast != null) {\r\n        worker.postMessage({\r\n            action: 'skipWaiting'\r\n        });\r\n    }\r\n\r\n};\r\n\r\n//initialize sw\r\nlet swController = new IndexController();\r\n","/**\r\n * indexdb helper.\r\n */\r\nclass IndexDBHelper {\r\n    static openDatabase() {\r\n        // If the browser doesn't support service worker,\r\n        // we don't care about having a database\r\n        if (!navigator.serviceWorker) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return idb.open('koshary', 4, upgradeDb => {\r\n            switch (upgradeDb.oldVersion) {\r\n                case 0:\r\n                    let restaurantStore = upgradeDb.createObjectStore('restaurants', {\r\n                        keyPath: 'id'\r\n                    });\r\n                    restaurantStore.createIndex('id', 'id');\r\n                case 1:\r\n                    let reviewStore = upgradeDb.createObjectStore('reviews', {\r\n                        keyPath: 'id'\r\n                    });\r\n                    reviewStore.createIndex('id', 'id');\r\n                case 2:\r\n                    let offlineReview = upgradeDb.createObjectStore('offline-reviews',{ keyPath: \"id\", autoIncrement: true });\r\n                case 3:\r\n                    let offlineRestaurantFavorite = upgradeDb.createObjectStore('offline-favorite',{ keyPath: \"id\", autoIncrement: true });\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n\r\n    static storeRestaurants(restaurants, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('restaurants', 'readwrite');\r\n            let store = tx.objectStore('restaurants');\r\n            restaurants.forEach(function (restaurant) {\r\n                store.put(restaurant);\r\n            });\r\n            tx.complete;\r\n        }).then(() => {\r\n            callback(null,restaurants);\r\n        });\r\n    }\r\n\r\n    static fetchRestaurants(callback) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('restaurants', 'readwrite');\r\n            let store = tx.objectStore('restaurants');\r\n            let idIndex = store.index(\"id\");\r\n            return idIndex.getAll();\r\n        }).then((json) => {\r\n            callback(null, json);\r\n        });\r\n    }\r\n    static fetchRestaurantById(id, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('restaurants', 'readwrite');\r\n            let store = tx.objectStore('restaurants');\r\n             let idIndex = store.index(\"id\");\r\n            return idIndex.getAll(); \r\n        }).then((restaurants) => {\r\n            let restaurant = restaurants.find((restaurant, i) => restaurant.id == id);\r\n            restaurant = restaurant[0];\r\n            callback(null,restaurant);\r\n        });\r\n\r\n    }\r\n\r\n    static toggleRestaurantFavorite(restaurant, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('restaurants', 'readwrite');\r\n            let store = tx.objectStore('restaurants');\r\n            store.put(restaurant);\r\n            return tx.complete;\r\n        }).then(()=>{\r\n             callback(null, restaurant);\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    static storeReviews(reviews, callback = () => {}) {\r\n        //cach reviews in indexdb\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('reviews', 'readwrite');\r\n            let store = tx.objectStore('reviews');\r\n            reviews.forEach(function (review) {\r\n                store.put(review);\r\n            });\r\n            return tx.complete;\r\n        }).then(() => {\r\n            callback(null, reviews);\r\n        });\r\n\r\n    }\r\n\r\n    static fetchReviews(id, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('reviews', 'readwrite');\r\n            let store = tx.objectStore('reviews');\r\n            let idIndex = store.index(\"id\");\r\n            return idIndex.getAll;\r\n        }).then((reviews) => {\r\n            let restraintReviewArray = {};\r\n            if (id) {\r\n                restraintReviewArray = reviews.filter((review, i) => review[\"restaurant_id\"] == restaurantId);\r\n            } else {\r\n                restraintReviewArray = reviews;\r\n            }\r\n            callback(null, restraintReviewArray);\r\n        });\r\n    }\r\n    static postReview(review, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('reviews', 'readwrite');\r\n            let store = tx.objectStore('reviews');\r\n            store.put(review);\r\n            return tx.complete;\r\n        }).then(() => {\r\n            callback(null,review);\r\n        });\r\n    }\r\n\r\n    static postReviewOffline(review, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('offline-reviews', 'readwrite');\r\n            let store = tx.objectStore('offline-reviews');\r\n            store.put(review);\r\n            return tx.complete;\r\n        }).then(() => {\r\n            callback(null, review);\r\n        });\r\n    }\r\n    \r\n    static postFavoriteOffline(restaurant, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('offline-favorite', 'readwrite');\r\n            let store = tx.objectStore('offline-favorite');\r\n            store.put(restaurant);\r\n            return tx.complete;\r\n        }).then(() => {\r\n            callback(null, restaurant);\r\n        });\r\n    }\r\n}\r\n","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        //const port = location.port ? location.port : 8000 // Change this to your server port\r\n        const port = 1337; //change according to gulpfile config\r\n        //const host = location.hostname ? location.hostname : 'localhost';\r\n        const host = 'localhost';\r\n        return `http://${host}:${port}`;\r\n    }\r\n\r\n    /**\r\n     * Fetch all restaurants.\r\n     */\r\n    static fetchRestaurants(callback) {\r\n        fetch(DBHelper.DATABASE_URL + '/restaurants').then((response) => {\r\n            return response.json();\r\n        }).then((restaurants) => {\r\n            //open indexdb to cach all restaurants data\r\n            IndexDBHelper.storeRestaurants(restaurants);\r\n            callback(null, restaurants);\r\n\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            IndexDBHelper.fetchRestaurants(callback);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static fetchRestaurantById(id, callback) {\r\n        fetch(DBHelper.DATABASE_URL + '/restaurants/' + id).then((response) => {\r\n            return response.json();\r\n        }).then((restaurant) => {\r\n\r\n            //add restuarants object array into a variable\r\n            callback(null, restaurant);\r\n\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            IndexDBHelper.fetchRestaurantById(id, callback);\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static toggleRestaurantFavorite(id, callback) {\r\n        DBHelper.fetchRestaurantById(id, function (error, restaurant) {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n\r\n                //send to option the opposite of what is currently set\r\n                restaurant.is_favorite = (restaurant.is_favorite == \"false\" ? \"true\" : \"false\");\r\n                fetch(DBHelper.DATABASE_URL + '/restaurants/' + id + '/?is_favorite=' + restaurant.is_favorite, {\r\n                        method: 'POST'\r\n                    }).then((response) => {\r\n                    return response.json();\r\n                }).then((restaurant) => {\r\n                    IndexDBHelper.toggleRestaurantFavorite(restaurant);\r\n                    callback(null, restaurant);\r\n                }).catch((ex) => {\r\n                    // TODO: add offline favorite to indexdb\r\n                    const error = (`Request failed. Returned status of ${ex}`);\r\n                    //get response from index db if available\r\n                    IndexDBHelper.postFavoriteOffline(restaurant, callback);\r\n                });\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisine(cuisine, callback) {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given cuisine type\r\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given neighborhood\r\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                let results = restaurants\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\r\n    static fetchNeighborhoods(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n                callback(null, uniqueNeighborhoods);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\r\n    static fetchCuisines(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n                callback(null, uniqueCuisines);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * get a review on a restaurant\r\n     */\r\n    static fetchRestaurantReview(restaurantId, callback) {\r\n        fetch(DBHelper.DATABASE_URL + '/reviews').then((response) => {\r\n            return response.json();\r\n        }).then((reviews) => {\r\n            const restraintReviewArray = reviews.filter((review, i) => review[\"restaurant_id\"] == restaurantId)\r\n\r\n            IndexDBHelper.storeReviews(reviews);\r\n\r\n            callback(null, restraintReviewArray);\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            //get response from index db if available\r\n            IndexDBHelper.fetchReviews(restaurantId, callback);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * post a review on a restaurant\r\n     */\r\n\r\n    static postRestaurantReview(review, callback) {\r\n        fetch(DBHelper.DATABASE_URL + '/reviews', {\r\n            method: \"POST\",\r\n            body: review,\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((addedReview) => {\r\n            //cach reviews in indexdb\r\n            review = Object.assign(addedReview,review);\r\n            IndexDBHelper.postReview(review);\r\n            callback(null, review);\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            IndexDBHelper.postReviewOffline(review, callback);\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        return (`/img/${restaurant.photograph}`);\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}\r\n","let restaurant, map;\r\n\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n\r\n    fetchRestaurantFromURL((error, restaurant) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            fillBreadcrumb();\r\n        }\r\n    });\r\n});\r\n\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\n\r\nconst initMap = () => {\r\n    if (!self.map) {\r\n        self.map = new google.maps.Map(document.getElementById('map'), {\r\n            zoom: 16,\r\n            center: restaurant.latlng,\r\n            scrollwheel: false\r\n        });\r\n    }\r\n    document.getElementById(\"map-container\").classList.add(\"show-interactive-map\");\r\n\r\n    DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n}\r\n\r\nconst initStaticMap = () => {\r\n    let latlng = `${restaurant.latlng.lat},${restaurant.latlng.lng}`,\r\n        zoom = 12,\r\n        imageConrtainer = document.getElementById(\"map-container\");\r\n    let size = imageConrtainer.offsetWidth + \"x\" + imageConrtainer.offsetHeight;\r\n    let staticMapURL = `https://maps.googleapis.com/maps/api/staticmap?center=${latlng}&zoom=${zoom}&size=${size}&key=AIzaSyD7zwXocDxCO_YLSyVhDNYZDmhMxr0RcNU`;\r\n    staticMapURL += `&markers=${restaurant.latlng.lat},${restaurant.latlng.lng}`;\r\n    document.querySelector(\".static-map\").setAttribute(\"src\", staticMapURL);\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nconst fetchRestaurantFromURL = (callback) => {\r\n    if (self.restaurant) { // restaurant already fetched!\r\n        callback(null, self.restaurant)\r\n        return;\r\n    }\r\n    const id = getParameterByName('id');\r\n    if (!id) { // no id found in URL\r\n        let error = 'No restaurant id in URL'\r\n        callback(error, null);\r\n    } else {\r\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n            self.restaurant = restaurant;\r\n            if (!restaurant) {\r\n                console.error(error);\r\n                return;\r\n            }\r\n            fillRestaurantHTML();\r\n            initStaticMap();\r\n            callback(null, restaurant);\r\n            //init lazy loading\r\n            setTimeout(function () {\r\n                bLazy.revalidate();\r\n            }, 10);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n    const name = document.getElementById('restaurant-name');\r\n    name.innerHTML = restaurant.name;\r\n\r\n    //create favorite button\r\n    const addTofavoriteButton = document.createElement(\"button\");\r\n    addTofavoriteButton.classList.add(\"add-tofavorite\");\r\n    if (restaurant.is_favorite == \"true\" || restaurant.is_favorite == true) {\r\n        addTofavoriteButton.classList.add(\"favorite\");\r\n        addTofavoriteButton.innerHTML = '<span>★</span> Favorited';\r\n        addTofavoriteButton.title = \"Click to remove from favorite\";\r\n    } else {\r\n        addTofavoriteButton.innerHTML = '<span>☆</span> Add To Favorite';\r\n    }\r\n    addTofavoriteButton.setAttribute(\"role\", \"button\");\r\n    addTofavoriteButton.setAttribute(\"onclick\", \"addRestaurantToFavorite(this)\");\r\n    addTofavoriteButton.dataset.restaurantId = restaurant.id;\r\n    name.append(addTofavoriteButton);\r\n\r\n\r\n\r\n    const address = document.getElementById('restaurant-address');\r\n    address.innerHTML = restaurant.address;\r\n\r\n    const image = document.getElementById('restaurant-img');\r\n    image.className = 'restaurant-img b-lazy';\r\n    //image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.src = \"/img/placeholder-image.jpg\";\r\n    image.setAttribute(\"data-src\", `${DBHelper.imageUrlForRestaurant(restaurant)}`);\r\n    image.setAttribute(\"data-srcset\", `/img/${restaurant.id}_300.jpg 300w,/img/${restaurant.id}.jpg 586w,/img/${restaurant.id}_800.jpg 800w`);\r\n\r\n    //    image.setAttribute(\"data-src-small\",`img/${restaurant.id}_300.jpg`);\r\n    //    image.setAttribute(\"data-src-medium\",`img/${restaurant.id}_580.jpg`);\r\n    //    image.setAttribute(\"data-src-large\",`img/${restaurant.id}_800.jpg`);\r\n    image.setAttribute(\"alt\", `${restaurant.name}Restaurant Main Image, `);\r\n\r\n    const cuisine = document.getElementById('restaurant-cuisine');\r\n    cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n    // fill operating hours\r\n    if (restaurant.operating_hours) {\r\n        fillRestaurantHoursHTML();\r\n    }\r\n    // fill reviews\r\n    DBHelper.fetchRestaurantReview(restaurant.id, (error, reviews) => {\r\n        if (error) return alert(error);\r\n        self.restaurant.reviews = reviews;\r\n        fillReviewsHTML();\r\n    })\r\n\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n    const hours = document.getElementById('restaurant-hours');\r\n    for (let key in operatingHours) {\r\n        const row = document.createElement('tr');\r\n\r\n        const day = document.createElement('th');\r\n        day.setAttribute(\"role\", \"rowheader\");\r\n        day.innerHTML = key;\r\n        row.appendChild(day);\r\n\r\n        const time = document.createElement('td');\r\n        time.innerHTML = operatingHours[key];\r\n        row.appendChild(time);\r\n\r\n        hours.appendChild(row);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Add - Remove retaurant to favorite.\r\n */\r\nconst addRestaurantToFavorite = (btn) => {\r\n    DBHelper.toggleRestaurantFavorite(btn.dataset['restaurantId'], function (error, response) {\r\n        if (error) alert(error);\r\n        if (response.is_favorite == \"false\") {\r\n            btn.classList.remove(\"favorite\");\r\n            btn.innerHTML = '<span>☆</span> Add To Favorite';\r\n        } else {\r\n            btn.innerHTML = '<span>★</span> Favorited';\r\n            btn.title = \"Click to remove from favorite\";\r\n            btn.classList.add(\"favorite\");\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Add review to a restaurant\r\n */\r\nconst submitRetaurantReview = (evt, restaurant = self.restaurant) => {\r\n    //reset the error container\r\n    document.getElementById(\"form-error-list\").innerHTML = \"\";\r\n    let reviewForm = document.getElementsByName(\"restaurant-review-form\")[0],\r\n        reviewBody = {};\r\n    //check if there is any missing text\r\n    if (reviewForm.elements[\"user_name\"].value == \"\") {\r\n        document.getElementById(\"form-error-list\").append(document.createElement(\"li\").innerHTML(\"Please fill your name\"))\r\n        return false;\r\n    }\r\n    if (reviewForm.elements[\"rating\"].value == \"\") {\r\n        document.getElementById(\"form-error-list\").append(document.createElement(\"li\").innerHTML(\"Please fill the rating\"))\r\n        return false;\r\n    }\r\n    if (reviewForm.elements[\"comments\"].value == \"\") {\r\n        document.getElementById(\"form-error-list\").append(document.createElement(\"li\").innerHTML(\"Please fill your comment\"))\r\n        return false;\r\n    }\r\n    reviewBody = {\r\n        restaurant_id: restaurant.id,\r\n        name: reviewForm.elements[\"user_name\"].value,\r\n        rating: reviewForm.elements[\"rating\"].value,\r\n        comments: reviewForm.elements[\"comments\"].value,\r\n        date: new Date()\r\n    };\r\n\r\n    DBHelper.postRestaurantReview(reviewBody, function (error, response) {\r\n        if (error) return alert(error);\r\n        if (!self.restaurant.reviews) {\r\n            self.restaurant.reviews = [];\r\n        }\r\n        self.restaurant.reviews.unshift(reviewBody);\r\n        fillReviewsHTML();\r\n        reviewForm.reset();\r\n    })\r\n    return true;\r\n}\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n    const container = document.getElementById('reviews-container');\r\n    container.innerHTML = '';\r\n    const title = document.createElement('h3');\r\n    title.innerHTML = 'Reviews';\r\n    container.appendChild(title);\r\n\r\n    if (!reviews) {\r\n        const noReviews = document.createElement('p');\r\n        noReviews.innerHTML = 'No reviews yet!';\r\n        container.appendChild(noReviews);\r\n        return;\r\n    }\r\n    const ul = document.createElement('ul');\r\n    ul.setAttribute(\"id\", \"reviews-list\");\r\n    ul.setAttribute(\"role\", \"list\");\r\n    reviews.forEach(review => {\r\n        ul.appendChild(createReviewHTML(review));\r\n    });\r\n\r\n    container.appendChild(ul);\r\n\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\nconst createReviewHTML = (review) => {\r\n    const li = document.createElement('li');\r\n    li.setAttribute(\"role\", \"listitem\")\r\n\r\n    const name = document.createElement('h3');\r\n    name.innerHTML = review.name;\r\n    li.appendChild(name);\r\n\r\n    if (review.createdAt) {\r\n        const date = document.createElement('date');\r\n        date.innerHTML = timeConverter(review.createdAt);\r\n        date.setAttribute(\"datetime\", review.date)\r\n        li.appendChild(date);\r\n    }\r\n\r\n\r\n    const rating = document.createElement('p');\r\n    rating.setAttribute(\"title\", \"1 to 5 rating\");\r\n    rating.innerHTML = `Rating: ${review.rating}`;\r\n    li.appendChild(rating);\r\n\r\n    const comments = document.createElement('p');\r\n    comments.innerHTML = review.comments;\r\n    li.appendChild(comments);\r\n\r\n    return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\r\n    const breadcrumb = document.getElementById('breadcrumb');\r\n    const li = document.createElement('li');\r\n    li.innerHTML = restaurant.name;\r\n    li.setAttribute(\"aria-current\", \"page\");\r\n    breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nconst getParameterByName = (name, url) => {\r\n    if (!url)\r\n        url = window.location.href;\r\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n        results = regex.exec(url);\r\n    if (!results)\r\n        return null;\r\n    if (!results[2])\r\n        return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n\r\n\r\n\r\nconst timeConverter = (UNIX_timestamp) => {\r\n    var a = new Date(UNIX_timestamp * 1000);\r\n    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    var year = a.getYear();\r\n    var month = months[a.getMonth()];\r\n    var date = a.getDate();\r\n    var hour = a.getHours();\r\n    var min = a.getMinutes();\r\n    var sec = a.getSeconds();\r\n    var time = date + ' ' + month + ' ' + hour + ':' + min + ':' + sec;\r\n    return time;\r\n}\r\nconst bLazy = new Blazy({\r\n    // Options\r\n});\r\n"]}