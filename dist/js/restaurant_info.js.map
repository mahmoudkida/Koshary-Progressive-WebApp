{"version":3,"sources":["indexdbhelper.js","dbhelper.js","swhelper.js","restaurant_info.js"],"names":["IndexDBHelper","navigator","serviceWorker","idb","open","upgradeDb","oldVersion","createObjectStore","keyPath","createIndex","autoIncrement","Promise","resolve","restaurants","callback","arguments","length","undefined","openDatabase","then","db","tx","transaction","store","objectStore","forEach","restaurant","put","complete","index","getAll","json","id","find","i","reviews","review","restraintReviewArray","filter","restaurantId","offlineReviews","ReviewId","delete","offlineFavorites","favoriteRestaurantId","fetchReviewOffline","error","reviewId","DBHelper","postRestaurantReview","deleteReviewOffline","fetchFavoriteOffline","favoriteRestaurants","favoriteRestaurant","toggleRestaurantFavorite","deleteFavoriteOffline","fetch","DATABASE_URL","response","storeRestaurants","catch","ex","fetchRestaurants","fetchRestaurantById","storeForOffline","is_favorite","method","postFavoriteOffline","cuisine","results","r","cuisine_type","neighborhood","neighborhoods","map","v","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","storeReviews","fetchReviews","body","addedReview","Object","assign","postReview","postReviewOffline","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","IndexController","this","_registerServiceWorker","prototype","refreshing","indexController","register","reg","controller","waiting","_updateReady","installing","_trackInstalling","addEventListener","window","location","reload","event","console","log","data","msg","worker","state","confirm","postMessage","action","swController","document","fetchRestaurantFromURL","initMap","self","Map","getElementById","zoom","center","scrollwheel","classList","add","restaurantStore","lat","lng","imageConrtainer","offlineReview","querySelector","setAttribute","staticMapURL","getParameterByName","initStaticMap","setTimeout","bLazy","revalidate","innerHTML","addTofavoriteButton","createElement","idIndex","dataset","append","address","image","className","src","imageUrlForRestaurant","operating_hours","fillRestaurantHoursHTML","fetchRestaurantReview","operatingHours","hours","key","row","day","appendChild","time","addRestaurantToFavorite","btn","alert","remove","submitRetaurantReview","evt","reviewBody","reviewForm","elements","value","restaurant_id","rating","date","Date","unshift","fillReviewsHTML","reset","container","noReviews","ul","createReviewHTML","li","createdAt","timeConverter","breadcrumb","href","replace","RegExp","exec","decodeURIComponent","UNIX_timestamp","a","month","getHours","Blazy"],"mappings":"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","file":"restaurant_info.js","sourcesContent":["/**\r\n * indexdb helper.\r\n */\r\n\r\n\r\nclass IndexDBHelper {\r\n    static openDatabase() {\r\n        // If the browser doesn't support service worker,\r\n        // we don't care about having a database\r\n        if (!navigator.serviceWorker) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return idb.open('koshary', 4, upgradeDb => {\r\n            switch (upgradeDb.oldVersion) {\r\n                case 0:\r\n                    let restaurantStore = upgradeDb.createObjectStore('restaurants', {\r\n                        keyPath: 'id'\r\n                    });\r\n                    restaurantStore.createIndex('id', 'id');\r\n                case 1:\r\n                    let reviewStore = upgradeDb.createObjectStore('reviews', {\r\n                        keyPath: 'id'\r\n                    });\r\n                    reviewStore.createIndex('id', 'id');\r\n                case 2:\r\n                    let offlineReview = upgradeDb.createObjectStore('offline-reviews', {\r\n                        keyPath: \"id\",\r\n                        autoIncrement: true\r\n                    });\r\n                case 3:\r\n                    let offlineRestaurantFavorite = upgradeDb.createObjectStore('offline-favorite', {\r\n                        keyPath: \"id\"\r\n                    });\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n\r\n    static storeRestaurants(restaurants, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('restaurants', 'readwrite');\r\n            let store = tx.objectStore('restaurants');\r\n            restaurants.forEach(function (restaurant) {\r\n                store.put(restaurant);\r\n            });\r\n            tx.complete;\r\n        }).then(() => {\r\n            callback(null, restaurants);\r\n        });\r\n    }\r\n\r\n    static fetchRestaurants(callback) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('restaurants', 'readwrite');\r\n            let store = tx.objectStore('restaurants');\r\n            let idIndex = store.index(\"id\");\r\n            return idIndex.getAll();\r\n        }).then((json) => {\r\n            callback(null, json);\r\n        });\r\n    }\r\n    static fetchRestaurantById(id, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('restaurants', 'readwrite');\r\n            let store = tx.objectStore('restaurants');\r\n            let idIndex = store.index(\"id\");\r\n            return idIndex.getAll();\r\n        }).then((restaurants) => {\r\n            let restaurant = restaurants.find((restaurant, i) => restaurant.id == id);\r\n            callback(null, restaurant);\r\n        });\r\n\r\n    }\r\n\r\n    static toggleRestaurantFavorite(restaurant, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('restaurants', 'readwrite');\r\n            let store = tx.objectStore('restaurants');\r\n            store.put(restaurant);\r\n            return tx.complete;\r\n        }).then(() => {\r\n            callback(null, restaurant);\r\n        });\r\n    }\r\n\r\n\r\n\r\n\r\n    static storeReviews(reviews, callback = () => {}) {\r\n        //cach reviews in indexdb\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('reviews', 'readwrite');\r\n            let store = tx.objectStore('reviews');\r\n            reviews.forEach(function (review) {\r\n                store.put(review);\r\n            });\r\n            return tx.complete;\r\n        }).then(() => {\r\n            callback(null, reviews);\r\n        });\r\n\r\n    }\r\n\r\n    static fetchReviews(id, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('reviews', 'readwrite');\r\n            let store = tx.objectStore('reviews');\r\n            let idIndex = store.index(\"id\");\r\n            return idIndex.getAll;\r\n        }).then((reviews) => {\r\n            let restraintReviewArray = {};\r\n            if (id) {\r\n                restraintReviewArray = reviews.filter((review, i) => review[\"restaurant_id\"] == restaurantId);\r\n            } else {\r\n                restraintReviewArray = reviews;\r\n            }\r\n            callback(null, restraintReviewArray);\r\n        });\r\n    }\r\n    static postReview(review, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('reviews', 'readwrite');\r\n            let store = tx.objectStore('reviews');\r\n            store.put(review);\r\n            return tx.complete;\r\n        }).then(() => {\r\n            callback(null, review);\r\n        });\r\n    }\r\n\r\n    static postReviewOffline(review, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('offline-reviews', 'readwrite');\r\n            let store = tx.objectStore('offline-reviews');\r\n            store.put(review);\r\n            return tx.complete;\r\n        }).then(() => {\r\n            callback(null, review);\r\n        });\r\n    }\r\n\r\n    static fetchReviewOffline(callback) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('offline-reviews', 'readwrite');\r\n            let store = tx.objectStore('offline-reviews');\r\n            return store.getAll();\r\n        }).then((offlineReviews) => {\r\n            callback(null, offlineReviews);\r\n        });\r\n    }\r\n\r\n    static deleteReviewOffline(ReviewId, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('offline-reviews', 'readwrite');\r\n            let store = tx.objectStore('offline-reviews');\r\n            return store.delete(ReviewId);\r\n        }).then(() => {\r\n            callback(null);\r\n        });\r\n    }\r\n    static postFavoriteOffline(restaurant, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('offline-favorite', 'readwrite');\r\n            let store = tx.objectStore('offline-favorite');\r\n            store.put(restaurant);\r\n            return tx.complete;\r\n        }).then(() => {\r\n            callback(null, restaurant);\r\n        });\r\n    }\r\n    static fetchFavoriteOffline(callback) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('offline-favorite', 'readwrite');\r\n            let store = tx.objectStore('offline-favorite');\r\n            return store.getAll();\r\n        }).then((offlineFavorites) => {\r\n            callback(null, offlineFavorites);\r\n        });\r\n    }\r\n    static deleteFavoriteOffline(favoriteRestaurantId, callback = () => {}) {\r\n        IndexDBHelper.openDatabase().then((db) => {\r\n            if (!db) return;\r\n            let tx = db.transaction('offline-favorite', 'readwrite');\r\n            let store = tx.objectStore('offline-favorite');\r\n            return store.delete(favoriteRestaurantId);\r\n        }).then(() => {\r\n            callback(null);\r\n        });\r\n    }\r\n}\r\n\r\n\r\n//try to submit offline reviews and favorite\r\nIndexDBHelper.fetchReviewOffline((error, reviews) => {\r\n    reviews.forEach((review) => {\r\n        let reviewId = review.id;\r\n        delete review.id;\r\n        DBHelper.postRestaurantReview(review, (error, review) => {\r\n            IndexDBHelper.deleteReviewOffline(reviewId);\r\n        }, false);\r\n    });\r\n});\r\n\r\nIndexDBHelper.fetchFavoriteOffline((error, favoriteRestaurants) => {\r\n    favoriteRestaurants.forEach((favoriteRestaurant) => {\r\n        DBHelper.toggleRestaurantFavorite(favoriteRestaurant.id, (error, favoriteRestaurant) => {\r\n            IndexDBHelper.deleteFavoriteOffline(favoriteRestaurant.id)\r\n        }, false);\r\n    });\r\n});","/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        //const port = location.port ? location.port : 8000 // Change this to your server port\r\n        const port = 1337; //change according to gulpfile config\r\n        //const host = location.hostname ? location.hostname : 'localhost';\r\n        const host = 'localhost';\r\n        return `http://${host}:${port}`;\r\n    }\r\n\r\n    /**\r\n     * Fetch all restaurants.\r\n     */\r\n    static fetchRestaurants(callback) {\r\n        fetch(DBHelper.DATABASE_URL + '/restaurants').then((response) => {\r\n            return response.json();\r\n        }).then((restaurants) => {\r\n            //open indexdb to cach all restaurants data\r\n            IndexDBHelper.storeRestaurants(restaurants);\r\n            callback(null, restaurants);\r\n\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            IndexDBHelper.fetchRestaurants(callback);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static fetchRestaurantById(id, callback) {\r\n        fetch(DBHelper.DATABASE_URL + '/restaurants/' + id).then((response) => {\r\n            return response.json();\r\n        }).then((restaurant) => {\r\n\r\n            //add restuarants object array into a variable\r\n            callback(null, restaurant);\r\n\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            IndexDBHelper.fetchRestaurantById(id, callback);\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static toggleRestaurantFavorite(id, callback, storeForOffline = true) {\r\n        DBHelper.fetchRestaurantById(id, function (error, restaurant) {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n\r\n                //send to option the opposite of what is currently set\r\n                restaurant.is_favorite = (restaurant.is_favorite == \"false\" ? \"true\" : \"false\");\r\n                fetch(DBHelper.DATABASE_URL + '/restaurants/' + id + '/?is_favorite=' + restaurant.is_favorite, {\r\n                    method: 'POST'\r\n                }).then((response) => {\r\n                    return response.json();\r\n                }).then((restaurant) => {\r\n                    IndexDBHelper.toggleRestaurantFavorite(restaurant);\r\n                    callback(null, restaurant);\r\n                }).catch((ex) => {\r\n                    // TODO: add offline favorite to indexdb\r\n                    const error = (`Request failed. Returned status of ${ex}`);\r\n                    //get response from index db if available\r\n                    if (storeForOffline) { //if false it mean that it's an attempt to save offline favorite so there is no need to cach it again\r\n                        IndexDBHelper.toggleRestaurantFavorite(restaurant);\r\n                        IndexDBHelper.postFavoriteOffline(restaurant, callback);\r\n                    }\r\n                });\r\n            }\r\n\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisine(cuisine, callback) {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given cuisine type\r\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given neighborhood\r\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                let results = restaurants\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\r\n    static fetchNeighborhoods(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n                // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n                callback(null, uniqueNeighborhoods);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\r\n    static fetchCuisines(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n                // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n                callback(null, uniqueCuisines);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * get a review on a restaurant\r\n     */\r\n    static fetchRestaurantReview(restaurantId, callback) {\r\n        fetch(DBHelper.DATABASE_URL + '/reviews').then((response) => {\r\n            return response.json();\r\n        }).then((reviews) => {\r\n            const restraintReviewArray = reviews.filter((review, i) => review[\"restaurant_id\"] == restaurantId)\r\n\r\n            IndexDBHelper.storeReviews(reviews);\r\n\r\n            callback(null, restraintReviewArray);\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            //get response from index db if available\r\n            IndexDBHelper.fetchReviews(restaurantId, callback);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * post a review on a restaurant\r\n     */\r\n\r\n    static postRestaurantReview(review, callback, storeForOffline = true) {\r\n        fetch(DBHelper.DATABASE_URL + '/reviews', {\r\n            method: \"POST\",\r\n            body: review,\r\n        }).then((response) => {\r\n            return response.json();\r\n        }).then((addedReview) => {\r\n            //cach reviews in indexdb\r\n            review = Object.assign(addedReview, review);\r\n            IndexDBHelper.postReview(review);\r\n            callback(null, review);\r\n        }).catch((ex) => {\r\n            const error = (`Request failed. Returned status of ${ex}`);\r\n            if (storeForOffline) {//if this token is false it means it's an attempt to submit offline review\r\n                IndexDBHelper.postReview(review);\r\n                IndexDBHelper.postReviewOffline(review, callback);\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant) {\r\n        return (`/img/${restaurant.photograph}`);\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}\r\n","function IndexController() {\r\n    this._registerServiceWorker();\r\n}\r\n\r\nIndexController.prototype._registerServiceWorker = function () {\r\n    if (!navigator.serviceWorker) return;\r\n\r\n    var indexController = this;\r\n\r\n    navigator.serviceWorker.register('sw.js').then(function (reg) {\r\n        if (!navigator.serviceWorker.controller) {\r\n            return;\r\n        }\r\n\r\n        if (reg.waiting) {\r\n            indexController._updateReady(reg.waiting);\r\n            return;\r\n        }\r\n\r\n        if (reg.installing) {\r\n            indexController._trackInstalling(reg.installing);\r\n            return;\r\n        }\r\n\r\n        reg.addEventListener('updatefound', function () {\r\n            indexController._trackInstalling(reg.installing);\r\n        });\r\n    });\r\n\r\n    // Ensure refresh is only called once.\r\n    // This works around a bug in \"force update on reload\".\r\n    var refreshing;\r\n    navigator.serviceWorker.addEventListener('controllerchange', function () {\r\n        if (refreshing) return;\r\n        window.location.reload();\r\n        refreshing = true;\r\n    });\r\n    navigator.serviceWorker.addEventListener('message', event => {\r\n        console.log(event.data.msg, event.data.url);\r\n    });\r\n};\r\n\r\nIndexController.prototype._trackInstalling = function (worker) {\r\n    var indexController = this;\r\n    worker.addEventListener('statechange', function () {\r\n        if (worker.state == 'installed') {\r\n            indexController._updateReady(worker);\r\n        }\r\n    });\r\n};\r\n\r\nIndexController.prototype._updateReady = function (worker) {\r\n\r\n    var toast = confirm(\"New version available, do you want to upate ?\");\r\n\r\n    if (toast != null) {\r\n        worker.postMessage({\r\n            action: 'skipWaiting'\r\n        });\r\n    }\r\n\r\n};\r\n\r\n//initialize sw\r\nlet swController = new IndexController();\r\n","let restaurant, map;\r\n\r\ndocument.addEventListener('DOMContentLoaded', (event) => {\r\n\r\n     \r\n    \r\n    fetchRestaurantFromURL((error, restaurant) => {\r\n        if (error) { // Got an error!\r\n            console.error(error);\r\n        } else {\r\n            fillBreadcrumb();\r\n        }\r\n    });\r\n});\r\n\r\n\r\n/**\r\n * Initialize Google map, called from HTML.\r\n */\r\n\r\nconst initMap = () => {\r\n    if (!self.map) {\r\n        self.map = new google.maps.Map(document.getElementById('map'), {\r\n            zoom: 16,\r\n            center: restaurant.latlng,\r\n            scrollwheel: false\r\n        });\r\n    }\r\n    document.getElementById(\"map-container\").classList.add(\"show-interactive-map\");\r\n\r\n    DBHelper.mapMarkerForRestaurant(self.restaurant, self.map);\r\n}\r\n\r\nconst initStaticMap = () => {\r\n    let latlng = `${restaurant.latlng.lat},${restaurant.latlng.lng}`,\r\n        zoom = 12,\r\n        imageConrtainer = document.getElementById(\"map-container\");\r\n    let size = imageConrtainer.offsetWidth + \"x\" + imageConrtainer.offsetHeight;\r\n    let staticMapURL = `https://maps.googleapis.com/maps/api/staticmap?center=${latlng}&zoom=${zoom}&size=${size}&key=AIzaSyD7zwXocDxCO_YLSyVhDNYZDmhMxr0RcNU`;\r\n    staticMapURL += `&markers=${restaurant.latlng.lat},${restaurant.latlng.lng}`;\r\n    document.querySelector(\".static-map\").setAttribute(\"src\", staticMapURL);\r\n}\r\n\r\n/**\r\n * Get current restaurant from page URL.\r\n */\r\nconst fetchRestaurantFromURL = (callback) => {\r\n    if (self.restaurant) { // restaurant already fetched!\r\n        callback(null, self.restaurant)\r\n        return;\r\n    }\r\n    const id = getParameterByName('id');\r\n    if (!id) { // no id found in URL\r\n        let error = 'No restaurant id in URL'\r\n        callback(error, null);\r\n    } else {\r\n        DBHelper.fetchRestaurantById(id, (error, restaurant) => {\r\n            self.restaurant = restaurant;\r\n            if (!restaurant) {\r\n                console.error(error);\r\n                return;\r\n            }\r\n            fillRestaurantHTML();\r\n            initStaticMap();\r\n            callback(null, restaurant);\r\n            //init lazy loading\r\n            setTimeout(function () {\r\n                bLazy.revalidate();\r\n            }, 10);\r\n        });\r\n    }\r\n}\r\n/**\r\n * Create restaurant HTML and add it to the webpage\r\n */\r\nconst fillRestaurantHTML = (restaurant = self.restaurant) => {\r\n    const name = document.getElementById('restaurant-name');\r\n    name.innerHTML = restaurant.name;\r\n\r\n    //create favorite button\r\n    const addTofavoriteButton = document.createElement(\"button\");\r\n    addTofavoriteButton.classList.add(\"add-tofavorite\");\r\n    if (restaurant.is_favorite == \"true\" || restaurant.is_favorite == true) {\r\n        addTofavoriteButton.classList.add(\"favorite\");\r\n        addTofavoriteButton.innerHTML = '<span>★</span> Favorited';\r\n        addTofavoriteButton.title = \"Click to remove from favorite\";\r\n    } else {\r\n        addTofavoriteButton.innerHTML = '<span>☆</span> Add To Favorite';\r\n    }\r\n    addTofavoriteButton.setAttribute(\"role\", \"button\");\r\n    addTofavoriteButton.setAttribute(\"onclick\", \"addRestaurantToFavorite(this)\");\r\n    addTofavoriteButton.dataset.restaurantId = restaurant.id;\r\n    name.append(addTofavoriteButton);\r\n\r\n\r\n\r\n    const address = document.getElementById('restaurant-address');\r\n    address.innerHTML = restaurant.address;\r\n\r\n    const image = document.getElementById('restaurant-img');\r\n    image.className = 'restaurant-img b-lazy';\r\n    //image.src = DBHelper.imageUrlForRestaurant(restaurant);\r\n    image.src = \"/img/placeholder-image.jpg\";\r\n    image.setAttribute(\"data-src\", `${DBHelper.imageUrlForRestaurant(restaurant)}`);\r\n    image.setAttribute(\"data-srcset\", `/img/${restaurant.id}_300.jpg 300w,/img/${restaurant.id}.jpg 586w,/img/${restaurant.id}_800.jpg 800w`);\r\n\r\n    //    image.setAttribute(\"data-src-small\",`img/${restaurant.id}_300.jpg`);\r\n    //    image.setAttribute(\"data-src-medium\",`img/${restaurant.id}_580.jpg`);\r\n    //    image.setAttribute(\"data-src-large\",`img/${restaurant.id}_800.jpg`);\r\n    image.setAttribute(\"alt\", `${restaurant.name}Restaurant Main Image, `);\r\n\r\n    const cuisine = document.getElementById('restaurant-cuisine');\r\n    cuisine.innerHTML = restaurant.cuisine_type;\r\n\r\n    // fill operating hours\r\n    if (restaurant.operating_hours) {\r\n        fillRestaurantHoursHTML();\r\n    }\r\n    // fill reviews\r\n    DBHelper.fetchRestaurantReview(restaurant.id, (error, reviews) => {\r\n        if (error) return alert(error);\r\n        self.restaurant.reviews = reviews;\r\n        fillReviewsHTML();\r\n    })\r\n\r\n}\r\n\r\n/**\r\n * Create restaurant operating hours HTML table and add it to the webpage.\r\n */\r\nconst fillRestaurantHoursHTML = (operatingHours = self.restaurant.operating_hours) => {\r\n    const hours = document.getElementById('restaurant-hours');\r\n    for (let key in operatingHours) {\r\n        const row = document.createElement('tr');\r\n\r\n        const day = document.createElement('th');\r\n        day.setAttribute(\"role\", \"rowheader\");\r\n        day.innerHTML = key;\r\n        row.appendChild(day);\r\n\r\n        const time = document.createElement('td');\r\n        time.innerHTML = operatingHours[key];\r\n        row.appendChild(time);\r\n\r\n        hours.appendChild(row);\r\n    }\r\n}\r\n\r\n\r\n/**\r\n * Add - Remove retaurant to favorite.\r\n */\r\nconst addRestaurantToFavorite = (btn) => {\r\n    DBHelper.toggleRestaurantFavorite(btn.dataset['restaurantId'], function (error, response) {\r\n        if (error) alert(error);\r\n        if (response.is_favorite == \"false\") {\r\n            btn.classList.remove(\"favorite\");\r\n            btn.innerHTML = '<span>☆</span> Add To Favorite';\r\n        } else {\r\n            btn.innerHTML = '<span>★</span> Favorited';\r\n            btn.title = \"Click to remove from favorite\";\r\n            btn.classList.add(\"favorite\");\r\n        }\r\n    });\r\n}\r\n\r\n/**\r\n * Add review to a restaurant\r\n */\r\nconst submitRetaurantReview = (evt, restaurant = self.restaurant) => {\r\n    //reset the error container\r\n    document.getElementById(\"form-error-list\").innerHTML = \"\";\r\n    let reviewForm = document.getElementsByName(\"restaurant-review-form\")[0],\r\n        reviewBody = {};\r\n    //check if there is any missing text\r\n    if (reviewForm.elements[\"user_name\"].value == \"\") {\r\n        document.getElementById(\"form-error-list\").append(document.createElement(\"li\").innerHTML(\"Please fill your name\"))\r\n        return false;\r\n    }\r\n    if (reviewForm.elements[\"rating\"].value == \"\") {\r\n        document.getElementById(\"form-error-list\").append(document.createElement(\"li\").innerHTML(\"Please fill the rating\"))\r\n        return false;\r\n    }\r\n    if (reviewForm.elements[\"comments\"].value == \"\") {\r\n        document.getElementById(\"form-error-list\").append(document.createElement(\"li\").innerHTML(\"Please fill your comment\"))\r\n        return false;\r\n    }\r\n    reviewBody = {\r\n        restaurant_id: restaurant.id,\r\n        name: reviewForm.elements[\"user_name\"].value,\r\n        rating: reviewForm.elements[\"rating\"].value,\r\n        comments: reviewForm.elements[\"comments\"].value,\r\n        date: new Date()\r\n    };\r\n\r\n    DBHelper.postRestaurantReview(reviewBody, function (error, response) {\r\n        if (error) return alert(error);\r\n        if (!self.restaurant.reviews) {\r\n            self.restaurant.reviews = [];\r\n        }\r\n        self.restaurant.reviews.unshift(reviewBody);\r\n        fillReviewsHTML();\r\n        reviewForm.reset();\r\n    })\r\n    return true;\r\n}\r\n/**\r\n * Create all reviews HTML and add them to the webpage.\r\n */\r\nconst fillReviewsHTML = (reviews = self.restaurant.reviews) => {\r\n    const container = document.getElementById('reviews-container');\r\n    container.innerHTML = '';\r\n    const title = document.createElement('h3');\r\n    title.innerHTML = 'Reviews';\r\n    container.appendChild(title);\r\n\r\n    if (!reviews) {\r\n        const noReviews = document.createElement('p');\r\n        noReviews.innerHTML = 'No reviews yet!';\r\n        container.appendChild(noReviews);\r\n        return;\r\n    }\r\n    const ul = document.createElement('ul');\r\n    ul.setAttribute(\"id\", \"reviews-list\");\r\n    ul.setAttribute(\"role\", \"list\");\r\n    reviews.forEach(review => {\r\n        ul.appendChild(createReviewHTML(review));\r\n    });\r\n\r\n    container.appendChild(ul);\r\n\r\n}\r\n\r\n/**\r\n * Create review HTML and add it to the webpage.\r\n */\r\nconst createReviewHTML = (review) => {\r\n    const li = document.createElement('li');\r\n    li.setAttribute(\"role\", \"listitem\")\r\n\r\n    const name = document.createElement('h3');\r\n    name.innerHTML = review.name;\r\n    li.appendChild(name);\r\n\r\n    if (review.createdAt) {\r\n        const date = document.createElement('date');\r\n        date.innerHTML = timeConverter(review.createdAt);\r\n        date.setAttribute(\"datetime\", review.date)\r\n        li.appendChild(date);\r\n    }\r\n\r\n\r\n    const rating = document.createElement('p');\r\n    rating.setAttribute(\"title\", \"1 to 5 rating\");\r\n    rating.innerHTML = `Rating: ${review.rating}`;\r\n    li.appendChild(rating);\r\n\r\n    const comments = document.createElement('p');\r\n    comments.innerHTML = review.comments;\r\n    li.appendChild(comments);\r\n\r\n    return li;\r\n}\r\n\r\n/**\r\n * Add restaurant name to the breadcrumb navigation menu\r\n */\r\nconst fillBreadcrumb = (restaurant = self.restaurant) => {\r\n    const breadcrumb = document.getElementById('breadcrumb');\r\n    const li = document.createElement('li');\r\n    li.innerHTML = restaurant.name;\r\n    li.setAttribute(\"aria-current\", \"page\");\r\n    breadcrumb.appendChild(li);\r\n}\r\n\r\n/**\r\n * Get a parameter by name from page URL.\r\n */\r\nconst getParameterByName = (name, url) => {\r\n    if (!url)\r\n        url = window.location.href;\r\n    name = name.replace(/[\\[\\]]/g, '\\\\$&');\r\n    const regex = new RegExp(`[?&]${name}(=([^&#]*)|&|#|$)`),\r\n        results = regex.exec(url);\r\n    if (!results)\r\n        return null;\r\n    if (!results[2])\r\n        return '';\r\n    return decodeURIComponent(results[2].replace(/\\+/g, ' '));\r\n}\r\n\r\n\r\n\r\nconst timeConverter = (UNIX_timestamp) => {\r\n    var a = new Date(UNIX_timestamp * 1000);\r\n    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\n    var year = a.getYear();\r\n    var month = months[a.getMonth()];\r\n    var date = a.getDate();\r\n    var hour = a.getHours();\r\n    var min = a.getMinutes();\r\n    var sec = a.getSeconds();\r\n    var time = date + ' ' + month + ' ' + hour + ':' + min + ':' + sec;\r\n    return time;\r\n}\r\nconst bLazy = new Blazy({\r\n    // Options\r\n});\r\n"]}